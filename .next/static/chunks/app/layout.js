/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"39f4d672f2b1\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIkM6XFxFYnR0aWthciBJbnRlbGxpZ2VuY2UgUHJvamVjdHNcXFRlc3QtQ2hhdC1BcHBcXGFwcFxcZ2xvYmFscy5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIzOWY0ZDY3MmYyYjFcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/providers.tsx":
/*!***************************!*\
  !*** ./app/providers.tsx ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Providers: () => (/* binding */ Providers)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _context_ThemeContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/context/ThemeContext */ \"(app-pages-browser)/./context/ThemeContext.tsx\");\n/* harmony import */ var _context_ChatContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/context/ChatContext */ \"(app-pages-browser)/./context/ChatContext.tsx\");\n/* __next_internal_client_entry_do_not_use__ Providers auto */ \n\n\n\nfunction Providers(param) {\n    let { children } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_context_ThemeContext__WEBPACK_IMPORTED_MODULE_2__.ThemeProvider, {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_context_ChatContext__WEBPACK_IMPORTED_MODULE_3__.ChatProvider, {\n            children: children\n        }, void 0, false, {\n            fileName: \"C:\\\\Ebttikar Intelligence Projects\\\\Test-Chat-App\\\\app\\\\providers.tsx\",\n            lineNumber: 14,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Ebttikar Intelligence Projects\\\\Test-Chat-App\\\\app\\\\providers.tsx\",\n        lineNumber: 13,\n        columnNumber: 5\n    }, this);\n}\n_c = Providers;\nvar _c;\n$RefreshReg$(_c, \"Providers\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9wcm92aWRlcnMudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFeUI7QUFDNkI7QUFDRjtBQU03QyxTQUFTRyxVQUFVLEtBQTRCO1FBQTVCLEVBQUVDLFFBQVEsRUFBa0IsR0FBNUI7SUFDeEIscUJBQ0UsOERBQUNILGdFQUFhQTtrQkFDWiw0RUFBQ0MsOERBQVlBO3NCQUNWRTs7Ozs7Ozs7Ozs7QUFJVDtLQVJnQkQiLCJzb3VyY2VzIjpbIkM6XFxFYnR0aWthciBJbnRlbGxpZ2VuY2UgUHJvamVjdHNcXFRlc3QtQ2hhdC1BcHBcXGFwcFxccHJvdmlkZXJzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJ0AvY29udGV4dC9UaGVtZUNvbnRleHQnXG5pbXBvcnQgeyBDaGF0UHJvdmlkZXIgfSBmcm9tICdAL2NvbnRleHQvQ2hhdENvbnRleHQnXG5cbmludGVyZmFjZSBQcm92aWRlcnNQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFByb3ZpZGVycyh7IGNoaWxkcmVuIH06IFByb3ZpZGVyc1Byb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPFRoZW1lUHJvdmlkZXI+XG4gICAgICA8Q2hhdFByb3ZpZGVyPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L0NoYXRQcm92aWRlcj5cbiAgICA8L1RoZW1lUHJvdmlkZXI+XG4gIClcbn0iXSwibmFtZXMiOlsiUmVhY3QiLCJUaGVtZVByb3ZpZGVyIiwiQ2hhdFByb3ZpZGVyIiwiUHJvdmlkZXJzIiwiY2hpbGRyZW4iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/providers.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./context/ChatContext.tsx":
/*!*********************************!*\
  !*** ./context/ChatContext.tsx ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatProvider: () => (/* binding */ ChatProvider),\n/* harmony export */   useChat: () => (/* binding */ useChat)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_n8n_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/n8n-client */ \"(app-pages-browser)/./lib/n8n-client.ts\");\n/* harmony import */ var _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/mockapi-client */ \"(app-pages-browser)/./lib/mockapi-client.ts\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/constants */ \"(app-pages-browser)/./lib/constants.ts\");\n/* __next_internal_client_entry_do_not_use__ useChat,ChatProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst ChatContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction useChat() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ChatContext);\n    if (!context) {\n        throw new Error('useChat must be used within a ChatProvider');\n    }\n    return context;\n}\n_s(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction ChatProvider(param) {\n    let { children } = param;\n    _s1();\n    // Initialize clients\n    const n8nClient = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)((0,_lib_n8n_client__WEBPACK_IMPORTED_MODULE_2__.createN8NClient)({\n        webhookUrl: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.n8n.webhookUrl,\n        streamingUrl: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.n8n.streamingUrl,\n        timeout: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.n8n.timeout,\n        retryAttempts: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.n8n.retryAttempts,\n        retryDelay: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.n8n.retryDelay\n    }));\n    const mockApiClient = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)((0,_lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.createMockAPIClient)({\n        baseUrl: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.mockApi.baseUrl,\n        projectId: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.mockApi.projectId,\n        timeout: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.mockApi.timeout\n    }));\n    // State\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        sessions: [],\n        currentSessionId: null,\n        isLoading: false,\n        error: null,\n        sidebarCollapsed: false,\n        theme: 'light'\n    });\n    // Current session messages\n    const [currentMessages, setCurrentMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [streamingMessageId, setStreamingMessageId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentMessageId, setCurrentMessageId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const sendingMessageRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Load initial data\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ChatProvider.useEffect\": ()=>{\n            loadSessions();\n            loadSidebarState();\n        }\n    }[\"ChatProvider.useEffect\"], []);\n    // Load messages when session changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ChatProvider.useEffect\": ()=>{\n            if (state.currentSessionId) {\n                loadMessages(state.currentSessionId);\n            } else {\n                setCurrentMessages([]);\n            }\n        }\n    }[\"ChatProvider.useEffect\"], [\n        state.currentSessionId\n    ]);\n    /**\n   * Load all sessions\n   */ const loadSessions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[loadSessions]\": async ()=>{\n            setState({\n                \"ChatProvider.useCallback[loadSessions]\": (prev)=>({\n                        ...prev,\n                        isLoading: true,\n                        error: null\n                    })\n            }[\"ChatProvider.useCallback[loadSessions]\"]);\n            try {\n                const sessions = await mockApiClient.current.getSessions();\n                const savedSessionId = localStorage.getItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sessionId);\n                setState({\n                    \"ChatProvider.useCallback[loadSessions]\": (prev)=>{\n                        var _sessions_;\n                        var _sessions__id;\n                        return {\n                            ...prev,\n                            sessions,\n                            isLoading: false,\n                            // Select saved session or first session if none selected\n                            currentSessionId: savedSessionId && sessions.find({\n                                \"ChatProvider.useCallback[loadSessions]\": (s)=>s.id === savedSessionId\n                            }[\"ChatProvider.useCallback[loadSessions]\"]) ? savedSessionId : (_sessions__id = (_sessions_ = sessions[0]) === null || _sessions_ === void 0 ? void 0 : _sessions_.id) !== null && _sessions__id !== void 0 ? _sessions__id : null\n                        };\n                    }\n                }[\"ChatProvider.useCallback[loadSessions]\"]);\n            } catch (error) {\n                const errorMessage = error instanceof _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.MockAPIError ? _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.mockAPIUtils.formatError(error) : 'Failed to load sessions';\n                setState({\n                    \"ChatProvider.useCallback[loadSessions]\": (prev)=>({\n                            ...prev,\n                            isLoading: false,\n                            error: errorMessage\n                        })\n                }[\"ChatProvider.useCallback[loadSessions]\"]);\n            }\n        }\n    }[\"ChatProvider.useCallback[loadSessions]\"], []);\n    /**\n   * Load messages for a session\n   */ const loadMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[loadMessages]\": async (sessionId)=>{\n            try {\n                const sessionMessages = await mockApiClient.current.getMessages(sessionId);\n                console.log('Loading messages for session:', sessionId, 'count:', sessionMessages.length);\n                console.log('Message IDs:', sessionMessages.map({\n                    \"ChatProvider.useCallback[loadMessages]\": (m)=>m.id\n                }[\"ChatProvider.useCallback[loadMessages]\"]));\n                setCurrentMessages(sessionMessages);\n            } catch (error) {\n                console.error('Failed to load messages:', error);\n            }\n        }\n    }[\"ChatProvider.useCallback[loadMessages]\"], []);\n    /**\n   * Create new session\n   */ const createSession = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[createSession]\": async (name)=>{\n            setState({\n                \"ChatProvider.useCallback[createSession]\": (prev)=>({\n                        ...prev,\n                        isLoading: true,\n                        error: null\n                    })\n            }[\"ChatProvider.useCallback[createSession]\"]);\n            try {\n                const sessionName = name || \"Chat \".concat(new Date().toLocaleString());\n                const session = await mockApiClient.current.createSession(sessionName);\n                setState({\n                    \"ChatProvider.useCallback[createSession]\": (prev)=>({\n                            ...prev,\n                            sessions: [\n                                session,\n                                ...prev.sessions\n                            ],\n                            currentSessionId: session.id,\n                            isLoading: false\n                        })\n                }[\"ChatProvider.useCallback[createSession]\"]);\n                // Save current session to localStorage\n                localStorage.setItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sessionId, session.id);\n            } catch (error) {\n                const errorMessage = error instanceof _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.MockAPIError ? _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.mockAPIUtils.formatError(error) : 'Failed to create session';\n                setState({\n                    \"ChatProvider.useCallback[createSession]\": (prev)=>({\n                            ...prev,\n                            isLoading: false,\n                            error: errorMessage\n                        })\n                }[\"ChatProvider.useCallback[createSession]\"]);\n            }\n        }\n    }[\"ChatProvider.useCallback[createSession]\"], []);\n    /**\n   * Select session\n   */ const selectSession = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[selectSession]\": async (sessionId)=>{\n            setState({\n                \"ChatProvider.useCallback[selectSession]\": (prev)=>({\n                        ...prev,\n                        currentSessionId: sessionId\n                    })\n            }[\"ChatProvider.useCallback[selectSession]\"]);\n            // Save to localStorage\n            localStorage.setItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sessionId, sessionId);\n            // Update session activity\n            try {\n                await mockApiClient.current.updateSessionActivity(sessionId);\n            } catch (error) {\n                console.error('Failed to update session activity:', error);\n            }\n        }\n    }[\"ChatProvider.useCallback[selectSession]\"], []);\n    /**\n   * Rename session\n   */ const renameSession = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[renameSession]\": async (sessionId, newName)=>{\n            const validationError = _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.mockAPIUtils.validateSessionName(newName);\n            if (validationError) {\n                setState({\n                    \"ChatProvider.useCallback[renameSession]\": (prev)=>({\n                            ...prev,\n                            error: validationError\n                        })\n                }[\"ChatProvider.useCallback[renameSession]\"]);\n                return;\n            }\n            try {\n                const updatedSession = await mockApiClient.current.updateSession(sessionId, {\n                    name: newName\n                });\n                setState({\n                    \"ChatProvider.useCallback[renameSession]\": (prev)=>({\n                            ...prev,\n                            sessions: prev.sessions.map({\n                                \"ChatProvider.useCallback[renameSession]\": (session)=>session.id === sessionId ? updatedSession : session\n                            }[\"ChatProvider.useCallback[renameSession]\"])\n                        })\n                }[\"ChatProvider.useCallback[renameSession]\"]);\n            } catch (error) {\n                const errorMessage = error instanceof _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.MockAPIError ? _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.mockAPIUtils.formatError(error) : 'Failed to rename session';\n                setState({\n                    \"ChatProvider.useCallback[renameSession]\": (prev)=>({\n                            ...prev,\n                            error: errorMessage\n                        })\n                }[\"ChatProvider.useCallback[renameSession]\"]);\n            }\n        }\n    }[\"ChatProvider.useCallback[renameSession]\"], []);\n    /**\n   * Delete session\n   */ const deleteSession = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[deleteSession]\": async (sessionId)=>{\n            try {\n                await mockApiClient.current.deleteSession(sessionId);\n                setState({\n                    \"ChatProvider.useCallback[deleteSession]\": (prev)=>{\n                        var _newSessions_;\n                        const newSessions = prev.sessions.filter({\n                            \"ChatProvider.useCallback[deleteSession].newSessions\": (s)=>s.id !== sessionId\n                        }[\"ChatProvider.useCallback[deleteSession].newSessions\"]);\n                        var _newSessions__id;\n                        const newCurrentSessionId = prev.currentSessionId === sessionId ? (_newSessions__id = (_newSessions_ = newSessions[0]) === null || _newSessions_ === void 0 ? void 0 : _newSessions_.id) !== null && _newSessions__id !== void 0 ? _newSessions__id : null : prev.currentSessionId;\n                        // Update localStorage\n                        if (newCurrentSessionId) {\n                            localStorage.setItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sessionId, newCurrentSessionId);\n                        } else {\n                            localStorage.removeItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sessionId);\n                        }\n                        return {\n                            ...prev,\n                            sessions: newSessions,\n                            currentSessionId: newCurrentSessionId\n                        };\n                    }\n                }[\"ChatProvider.useCallback[deleteSession]\"]);\n            } catch (error) {\n                const errorMessage = error instanceof _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.MockAPIError ? _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.mockAPIUtils.formatError(error) : 'Failed to delete session';\n                setState({\n                    \"ChatProvider.useCallback[deleteSession]\": (prev)=>({\n                            ...prev,\n                            error: errorMessage\n                        })\n                }[\"ChatProvider.useCallback[deleteSession]\"]);\n            }\n        }\n    }[\"ChatProvider.useCallback[deleteSession]\"], []);\n    /**\n   * Send message\n   */ const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[sendMessage]\": async (content)=>{\n            if (!state.currentSessionId) {\n                setState({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>({\n                            ...prev,\n                            error: 'No session selected'\n                        })\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                return;\n            }\n            // Prevent double submissions with ref\n            if (sendingMessageRef.current) {\n                console.log('Already sending message, ignoring duplicate request');\n                return;\n            }\n            sendingMessageRef.current = true;\n            setState({\n                \"ChatProvider.useCallback[sendMessage]\": (prev)=>({\n                        ...prev,\n                        error: null,\n                        isLoading: true\n                    })\n            }[\"ChatProvider.useCallback[sendMessage]\"]);\n            // Generate a temporary message ID for tracking\n            const tempMessageId = \"temp-\".concat(Date.now());\n            setCurrentMessageId(tempMessageId);\n            // Create user message\n            const userMessage = {\n                sessionId: state.currentSessionId,\n                content,\n                type: 'user',\n                timestamp: new Date()\n            };\n            try {\n                // Save user message\n                const savedUserMessage = await mockApiClient.current.createMessage(userMessage);\n                console.log('Adding user message:', savedUserMessage.id);\n                setCurrentMessages({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>{\n                        // Check if this message already exists to prevent duplicates\n                        const exists = prev.some({\n                            \"ChatProvider.useCallback[sendMessage].exists\": (msg)=>msg.id === savedUserMessage.id\n                        }[\"ChatProvider.useCallback[sendMessage].exists\"]);\n                        if (exists) {\n                            console.log('User message already exists, skipping:', savedUserMessage.id);\n                            return prev;\n                        }\n                        console.log('Adding new user message to state:', savedUserMessage.id);\n                        return [\n                            ...prev,\n                            savedUserMessage\n                        ];\n                    }\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                // Prepare n8n request with message ID for tracking\n                const n8nRequest = {\n                    username: 'user',\n                    message: content,\n                    sessionId: state.currentSessionId,\n                    timestamp: new Date(),\n                    messageId: tempMessageId // Add this to track thinking updates\n                };\n                // Send to n8n\n                const response = await n8nClient.current.sendMessageWithRetry(n8nRequest);\n                // Create assistant message\n                const assistantMessage = {\n                    sessionId: state.currentSessionId,\n                    content: '',\n                    type: 'assistant',\n                    timestamp: new Date(),\n                    responseData: {\n                        type: response.messageType,\n                        content: response.content,\n                        metadata: response.metadata\n                    }\n                };\n                // Save assistant message\n                const savedAssistantMessage = await mockApiClient.current.createMessage(assistantMessage);\n                console.log('Adding assistant message:', savedAssistantMessage.id);\n                setCurrentMessages({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>{\n                        // Check if this message already exists to prevent duplicates\n                        const exists = prev.some({\n                            \"ChatProvider.useCallback[sendMessage].exists\": (msg)=>msg.id === savedAssistantMessage.id\n                        }[\"ChatProvider.useCallback[sendMessage].exists\"]);\n                        if (exists) {\n                            console.log('Assistant message already exists, skipping:', savedAssistantMessage.id);\n                            return prev;\n                        }\n                        console.log('Adding new assistant message to state:', savedAssistantMessage.id);\n                        return [\n                            ...prev,\n                            savedAssistantMessage\n                        ];\n                    }\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                // Update session in state\n                setState({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>({\n                            ...prev,\n                            sessions: prev.sessions.map({\n                                \"ChatProvider.useCallback[sendMessage]\": (session)=>session.id === state.currentSessionId ? {\n                                        ...session,\n                                        metadata: {\n                                            ...session.metadata,\n                                            messageCount: session.metadata.messageCount + 2\n                                        }\n                                    } : session\n                            }[\"ChatProvider.useCallback[sendMessage]\"])\n                        })\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                // Clear loading state and message ID on success\n                setState({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>({\n                            ...prev,\n                            isLoading: false\n                        })\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                setCurrentMessageId(null);\n            } catch (error) {\n                const errorMessage = error instanceof _lib_n8n_client__WEBPACK_IMPORTED_MODULE_2__.N8NError ? _lib_n8n_client__WEBPACK_IMPORTED_MODULE_2__.n8nUtils.formatError(error) : 'Failed to send message';\n                setState({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>({\n                            ...prev,\n                            error: errorMessage,\n                            isLoading: false\n                        })\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                setCurrentMessageId(null);\n            } finally{\n                sendingMessageRef.current = false;\n            }\n        }\n    }[\"ChatProvider.useCallback[sendMessage]\"], [\n        state.currentSessionId\n    ]);\n    /**\n   * Handle streaming messages\n   */ const handleStreaming = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[handleStreaming]\": async (sessionId)=>{\n            try {\n                for await (const response of n8nClient.current.streamMessages(sessionId)){\n                    if (_lib_n8n_client__WEBPACK_IMPORTED_MODULE_2__.n8nUtils.isInterimMessage(response)) {\n                        // Create interim message\n                        const interimMessage = {\n                            sessionId,\n                            content: typeof response.content === 'string' ? response.content : JSON.stringify(response.content),\n                            type: 'interim',\n                            timestamp: new Date(),\n                            responseData: {\n                                type: response.messageType,\n                                content: response.content,\n                                metadata: response.metadata\n                            }\n                        };\n                        // Save and display interim message\n                        const savedInterimMessage = await mockApiClient.current.createMessage(interimMessage);\n                        setCurrentMessages({\n                            \"ChatProvider.useCallback[handleStreaming]\": (prev)=>[\n                                    ...prev,\n                                    savedInterimMessage\n                                ]\n                        }[\"ChatProvider.useCallback[handleStreaming]\"]);\n                    }\n                }\n            } catch (error) {\n                console.error('Streaming error:', error);\n            }\n        }\n    }[\"ChatProvider.useCallback[handleStreaming]\"], []);\n    /**\n   * Retry failed message\n   */ const retryMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[retryMessage]\": async (messageId)=>{\n            const message = currentMessages.find({\n                \"ChatProvider.useCallback[retryMessage].message\": (m)=>m.id === messageId\n            }[\"ChatProvider.useCallback[retryMessage].message\"]);\n            if (!message || message.type !== 'user') return;\n            await sendMessage(message.content);\n        }\n    }[\"ChatProvider.useCallback[retryMessage]\"], [\n        currentMessages,\n        sendMessage\n    ]);\n    /**\n   * Toggle sidebar\n   */ const toggleSidebar = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[toggleSidebar]\": ()=>{\n            setState({\n                \"ChatProvider.useCallback[toggleSidebar]\": (prev)=>{\n                    const newCollapsed = !prev.sidebarCollapsed;\n                    localStorage.setItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sidebarCollapsed, String(newCollapsed));\n                    return {\n                        ...prev,\n                        sidebarCollapsed: newCollapsed\n                    };\n                }\n            }[\"ChatProvider.useCallback[toggleSidebar]\"]);\n        }\n    }[\"ChatProvider.useCallback[toggleSidebar]\"], []);\n    /**\n   * Load sidebar state from localStorage\n   */ const loadSidebarState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[loadSidebarState]\": ()=>{\n            const saved = localStorage.getItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sidebarCollapsed);\n            if (saved) {\n                setState({\n                    \"ChatProvider.useCallback[loadSidebarState]\": (prev)=>({\n                            ...prev,\n                            sidebarCollapsed: saved === 'true'\n                        })\n                }[\"ChatProvider.useCallback[loadSidebarState]\"]);\n            }\n        }\n    }[\"ChatProvider.useCallback[loadSidebarState]\"], []);\n    /**\n   * Clear error\n   */ const clearError = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[clearError]\": ()=>{\n            setState({\n                \"ChatProvider.useCallback[clearError]\": (prev)=>({\n                        ...prev,\n                        error: null\n                    })\n            }[\"ChatProvider.useCallback[clearError]\"]);\n        }\n    }[\"ChatProvider.useCallback[clearError]\"], []);\n    const value = {\n        state,\n        currentMessages,\n        currentMessageId,\n        createSession,\n        selectSession,\n        renameSession,\n        deleteSession,\n        sendMessage,\n        retryMessage,\n        toggleSidebar,\n        clearError\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ChatContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Ebttikar Intelligence Projects\\\\Test-Chat-App\\\\context\\\\ChatContext.tsx\",\n        lineNumber: 445,\n        columnNumber: 5\n    }, this);\n}\n_s1(ChatProvider, \"yqIVGbJRCf/4KC7JQutgEjkWA2Q=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./context/ChatContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./context/ThemeContext.tsx":
/*!**********************************!*\
  !*** ./context/ThemeContext.tsx ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ThemeProvider: () => (/* binding */ ThemeProvider),\n/* harmony export */   useTheme: () => (/* binding */ useTheme)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/constants */ \"(app-pages-browser)/./lib/constants.ts\");\n/* __next_internal_client_entry_do_not_use__ useTheme,ThemeProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst ThemeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction useTheme() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThemeContext);\n    if (!context) {\n        throw new Error('useTheme must be used within a ThemeProvider');\n    }\n    return context;\n}\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction ThemeProvider(param) {\n    let { children, defaultTheme = _lib_constants__WEBPACK_IMPORTED_MODULE_2__.UI_CONFIG.theme.defaultTheme } = param;\n    _s1();\n    const [theme, setThemeState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(defaultTheme);\n    const [mounted, setMounted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ThemeProvider.useEffect\": ()=>{\n            setMounted(true);\n            // Load theme from localStorage\n            const savedTheme = localStorage.getItem(_lib_constants__WEBPACK_IMPORTED_MODULE_2__.STORAGE_KEYS.theme);\n            if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {\n                setThemeState(savedTheme);\n            } else {\n                // Check system preference\n                if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                    setThemeState('dark');\n                }\n            }\n        }\n    }[\"ThemeProvider.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ThemeProvider.useEffect\": ()=>{\n            if (!mounted) return;\n            const root = window.document.documentElement;\n            root.classList.remove('light', 'dark');\n            root.classList.add(theme);\n            // Save to localStorage\n            localStorage.setItem(_lib_constants__WEBPACK_IMPORTED_MODULE_2__.STORAGE_KEYS.theme, theme);\n        }\n    }[\"ThemeProvider.useEffect\"], [\n        theme,\n        mounted\n    ]);\n    const toggleTheme = ()=>{\n        setThemeState((prev)=>prev === 'light' ? 'dark' : 'light');\n    };\n    const setTheme = (newTheme)=>{\n        setThemeState(newTheme);\n    };\n    // Prevent flash of unstyled content\n    if (!mounted) {\n        return null;\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ThemeContext.Provider, {\n        value: {\n            theme,\n            toggleTheme,\n            setTheme\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Ebttikar Intelligence Projects\\\\Test-Chat-App\\\\context\\\\ThemeContext.tsx\",\n        lineNumber: 72,\n        columnNumber: 5\n    }, this);\n}\n_s1(ThemeProvider, \"VWBRAFqA9nY/1CsqzTyaWLX2gqE=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbnRleHQvVGhlbWVDb250ZXh0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUU2RTtBQUVwQjtBQVF6RCxNQUFNTyw2QkFBZU4sb0RBQWFBLENBQStCTztBQUUxRCxTQUFTQzs7SUFDZCxNQUFNQyxVQUFVUixpREFBVUEsQ0FBQ0s7SUFDM0IsSUFBSSxDQUFDRyxTQUFTO1FBQ1osTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVDtHQU5nQkQ7QUFhVCxTQUFTRyxjQUFjLEtBQTZFO1FBQTdFLEVBQUVDLFFBQVEsRUFBRUMsZUFBZVQscURBQVNBLENBQUNVLEtBQUssQ0FBQ0QsWUFBWSxFQUFzQixHQUE3RTs7SUFDNUIsTUFBTSxDQUFDQyxPQUFPQyxjQUFjLEdBQUdaLCtDQUFRQSxDQUFRVTtJQUMvQyxNQUFNLENBQUNHLFNBQVNDLFdBQVcsR0FBR2QsK0NBQVFBLENBQUM7SUFFdkNELGdEQUFTQTttQ0FBQztZQUNSZSxXQUFXO1lBRVgsK0JBQStCO1lBQy9CLE1BQU1DLGFBQWFDLGFBQWFDLE9BQU8sQ0FBQ2Ysd0RBQVlBLENBQUNTLEtBQUs7WUFDMUQsSUFBSUksY0FBZUEsQ0FBQUEsZUFBZSxXQUFXQSxlQUFlLE1BQUssR0FBSTtnQkFDbkVILGNBQWNHO1lBQ2hCLE9BQU87Z0JBQ0wsMEJBQTBCO2dCQUMxQixJQUFJRyxPQUFPQyxVQUFVLENBQUMsZ0NBQWdDQyxPQUFPLEVBQUU7b0JBQzdEUixjQUFjO2dCQUNoQjtZQUNGO1FBQ0Y7a0NBQUcsRUFBRTtJQUVMYixnREFBU0E7bUNBQUM7WUFDUixJQUFJLENBQUNjLFNBQVM7WUFFZCxNQUFNUSxPQUFPSCxPQUFPSSxRQUFRLENBQUNDLGVBQWU7WUFDNUNGLEtBQUtHLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLFNBQVM7WUFDL0JKLEtBQUtHLFNBQVMsQ0FBQ0UsR0FBRyxDQUFDZjtZQUVuQix1QkFBdUI7WUFDdkJLLGFBQWFXLE9BQU8sQ0FBQ3pCLHdEQUFZQSxDQUFDUyxLQUFLLEVBQUVBO1FBQzNDO2tDQUFHO1FBQUNBO1FBQU9FO0tBQVE7SUFFbkIsTUFBTWUsY0FBYztRQUNsQmhCLGNBQWNpQixDQUFBQSxPQUFRQSxTQUFTLFVBQVUsU0FBUztJQUNwRDtJQUVBLE1BQU1DLFdBQVcsQ0FBQ0M7UUFDaEJuQixjQUFjbUI7SUFDaEI7SUFFQSxvQ0FBb0M7SUFDcEMsSUFBSSxDQUFDbEIsU0FBUztRQUNaLE9BQU87SUFDVDtJQUVBLHFCQUNFLDhEQUFDVixhQUFhNkIsUUFBUTtRQUFDQyxPQUFPO1lBQUV0QjtZQUFPaUI7WUFBYUU7UUFBUztrQkFDMURyQjs7Ozs7O0FBR1A7SUFoRGdCRDtLQUFBQSIsInNvdXJjZXMiOlsiQzpcXEVidHRpa2FyIEludGVsbGlnZW5jZSBQcm9qZWN0c1xcVGVzdC1DaGF0LUFwcFxcY29udGV4dFxcVGhlbWVDb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFRoZW1lIH0gZnJvbSAnQC90eXBlcydcbmltcG9ydCB7IFVJX0NPTkZJRywgU1RPUkFHRV9LRVlTIH0gZnJvbSAnQC9saWIvY29uc3RhbnRzJ1xuXG5pbnRlcmZhY2UgVGhlbWVDb250ZXh0VHlwZSB7XG4gIHRoZW1lOiBUaGVtZVxuICB0b2dnbGVUaGVtZTogKCkgPT4gdm9pZFxuICBzZXRUaGVtZTogKHRoZW1lOiBUaGVtZSkgPT4gdm9pZFxufVxuXG5jb25zdCBUaGVtZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFRoZW1lQ29udGV4dFR5cGUgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZClcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpXG4gIGlmICghY29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXNlVGhlbWUgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIFRoZW1lUHJvdmlkZXInKVxuICB9XG4gIHJldHVybiBjb250ZXh0XG59XG5cbmludGVyZmFjZSBUaGVtZVByb3ZpZGVyUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG4gIGRlZmF1bHRUaGVtZT86IFRoZW1lXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaGVtZVByb3ZpZGVyKHsgY2hpbGRyZW4sIGRlZmF1bHRUaGVtZSA9IFVJX0NPTkZJRy50aGVtZS5kZWZhdWx0VGhlbWUgfTogVGhlbWVQcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IFt0aGVtZSwgc2V0VGhlbWVTdGF0ZV0gPSB1c2VTdGF0ZTxUaGVtZT4oZGVmYXVsdFRoZW1lKVxuICBjb25zdCBbbW91bnRlZCwgc2V0TW91bnRlZF0gPSB1c2VTdGF0ZShmYWxzZSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vdW50ZWQodHJ1ZSlcbiAgICBcbiAgICAvLyBMb2FkIHRoZW1lIGZyb20gbG9jYWxTdG9yYWdlXG4gICAgY29uc3Qgc2F2ZWRUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNUT1JBR0VfS0VZUy50aGVtZSkgYXMgVGhlbWUgfCBudWxsXG4gICAgaWYgKHNhdmVkVGhlbWUgJiYgKHNhdmVkVGhlbWUgPT09ICdsaWdodCcgfHwgc2F2ZWRUaGVtZSA9PT0gJ2RhcmsnKSkge1xuICAgICAgc2V0VGhlbWVTdGF0ZShzYXZlZFRoZW1lKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDaGVjayBzeXN0ZW0gcHJlZmVyZW5jZVxuICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJykubWF0Y2hlcykge1xuICAgICAgICBzZXRUaGVtZVN0YXRlKCdkYXJrJylcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFtb3VudGVkKSByZXR1cm5cblxuICAgIGNvbnN0IHJvb3QgPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XG4gICAgcm9vdC5jbGFzc0xpc3QucmVtb3ZlKCdsaWdodCcsICdkYXJrJylcbiAgICByb290LmNsYXNzTGlzdC5hZGQodGhlbWUpXG5cbiAgICAvLyBTYXZlIHRvIGxvY2FsU3RvcmFnZVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfS0VZUy50aGVtZSwgdGhlbWUpXG4gIH0sIFt0aGVtZSwgbW91bnRlZF0pXG5cbiAgY29uc3QgdG9nZ2xlVGhlbWUgPSAoKSA9PiB7XG4gICAgc2V0VGhlbWVTdGF0ZShwcmV2ID0+IHByZXYgPT09ICdsaWdodCcgPyAnZGFyaycgOiAnbGlnaHQnKVxuICB9XG5cbiAgY29uc3Qgc2V0VGhlbWUgPSAobmV3VGhlbWU6IFRoZW1lKSA9PiB7XG4gICAgc2V0VGhlbWVTdGF0ZShuZXdUaGVtZSlcbiAgfVxuXG4gIC8vIFByZXZlbnQgZmxhc2ggb2YgdW5zdHlsZWQgY29udGVudFxuICBpZiAoIW1vdW50ZWQpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8VGhlbWVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IHRoZW1lLCB0b2dnbGVUaGVtZSwgc2V0VGhlbWUgfX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9UaGVtZUNvbnRleHQuUHJvdmlkZXI+XG4gIClcbn0iXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiVUlfQ09ORklHIiwiU1RPUkFHRV9LRVlTIiwiVGhlbWVDb250ZXh0IiwidW5kZWZpbmVkIiwidXNlVGhlbWUiLCJjb250ZXh0IiwiRXJyb3IiLCJUaGVtZVByb3ZpZGVyIiwiY2hpbGRyZW4iLCJkZWZhdWx0VGhlbWUiLCJ0aGVtZSIsInNldFRoZW1lU3RhdGUiLCJtb3VudGVkIiwic2V0TW91bnRlZCIsInNhdmVkVGhlbWUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwid2luZG93IiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJyb290IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJzZXRJdGVtIiwidG9nZ2xlVGhlbWUiLCJwcmV2Iiwic2V0VGhlbWUiLCJuZXdUaGVtZSIsIlByb3ZpZGVyIiwidmFsdWUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./context/ThemeContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/constants.ts":
/*!**************************!*\
  !*** ./lib/constants.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_CONFIG: () => (/* binding */ API_CONFIG),\n/* harmony export */   APP_CONFIG: () => (/* binding */ APP_CONFIG),\n/* harmony export */   COLORS: () => (/* binding */ COLORS),\n/* harmony export */   ERROR_MESSAGES: () => (/* binding */ ERROR_MESSAGES),\n/* harmony export */   KEYBOARD_SHORTCUTS: () => (/* binding */ KEYBOARD_SHORTCUTS),\n/* harmony export */   STORAGE_KEYS: () => (/* binding */ STORAGE_KEYS),\n/* harmony export */   UI_CONFIG: () => (/* binding */ UI_CONFIG),\n/* harmony export */   VALIDATION_RULES: () => (/* binding */ VALIDATION_RULES)\n/* harmony export */ });\nconst APP_CONFIG = {\n    name: 'Chat Application',\n    version: '1.0.0',\n    description: 'Modern chat application with n8n workflow integration'\n};\nconst API_CONFIG = {\n    n8n: {\n        webhookUrl: \"https://n8n.srv824867.hstgr.cloud/webhook/chat-app-mock\" || 0,\n        streamingUrl: \"https://n8n.srv824867.hstgr.cloud/webhook/chat-app-mock\" || 0,\n        timeout: 30000,\n        retryAttempts: 3,\n        retryDelay: 1000\n    },\n    mockApi: {\n        baseUrl: \"https://mockapi.io/api/v1\" || 0,\n        projectId: \"your-project-id\" || 0,\n        timeout: 10000\n    }\n};\nconst UI_CONFIG = {\n    sidebar: {\n        width: 280,\n        collapsedWidth: 64,\n        animationDuration: 200\n    },\n    chat: {\n        maxMessageLength: 4000,\n        typingIndicatorDelay: 500,\n        messageRetryAttempts: 3\n    },\n    theme: {\n        defaultTheme: 'light',\n        storageKey: 'chat-theme'\n    }\n};\nconst COLORS = {\n    earth: {\n        sand: '#f5f0e1',\n        clay: '#daa578',\n        moss: '#4c6f4a',\n        stone: '#a69b8e',\n        bark: '#654321'\n    },\n    semantic: {\n        success: '#22c55e',\n        warning: '#f59e0b',\n        error: '#ef4444',\n        info: '#3b82f6'\n    }\n};\nconst KEYBOARD_SHORTCUTS = {\n    newSession: 'mod+n',\n    search: 'mod+k',\n    toggleSidebar: 'mod+\\\\',\n    toggleTheme: 'mod+shift+t',\n    sendMessage: 'enter',\n    newLine: 'shift+enter'\n};\nconst VALIDATION_RULES = {\n    session: {\n        nameMaxLength: 100,\n        nameMinLength: 1\n    },\n    message: {\n        contentMaxLength: 4000,\n        contentMinLength: 1\n    }\n};\nconst ERROR_MESSAGES = {\n    network: 'Network connection failed. Please check your internet connection.',\n    timeout: 'Request timed out. Please try again.',\n    server: 'Server error occurred. Please try again later.',\n    validation: 'Invalid input. Please check your data.',\n    notFound: 'Resource not found.',\n    rateLimit: 'Too many requests. Please wait and try again.',\n    unknown: 'An unexpected error occurred. Please try again.'\n};\nconst STORAGE_KEYS = {\n    theme: 'chat-theme',\n    sessionId: 'current-session-id',\n    sidebarCollapsed: 'sidebar-collapsed'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9jb25zdGFudHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxhQUFhO0lBQ3hCQyxNQUFNO0lBQ05DLFNBQVM7SUFDVEMsYUFBYTtBQUNmLEVBQVc7QUFFSixNQUFNQyxhQUFhO0lBQ3hCQyxLQUFLO1FBQ0hDLFlBQVlDLHlEQUF1QyxJQUFJLENBQTRDO1FBQ25HRyxjQUFjSCx5REFBeUMsSUFBSSxDQUE4QztRQUN6R0ssU0FBUztRQUNUQyxlQUFlO1FBQ2ZDLFlBQVk7SUFDZDtJQUNBQyxTQUFTO1FBQ1BDLFNBQVNULDJCQUF3QyxJQUFJLENBQTJCO1FBQ2hGVyxXQUFXWCxpQkFBMEMsSUFBSSxDQUFpQjtRQUMxRUssU0FBUztJQUNYO0FBQ0YsRUFBVztBQUVKLE1BQU1RLFlBQVk7SUFDdkJDLFNBQVM7UUFDUEMsT0FBTztRQUNQQyxnQkFBZ0I7UUFDaEJDLG1CQUFtQjtJQUNyQjtJQUNBQyxNQUFNO1FBQ0pDLGtCQUFrQjtRQUNsQkMsc0JBQXNCO1FBQ3RCQyxzQkFBc0I7SUFDeEI7SUFDQUMsT0FBTztRQUNMQyxjQUFjO1FBQ2RDLFlBQVk7SUFDZDtBQUNGLEVBQVc7QUFFSixNQUFNQyxTQUFTO0lBQ3BCQyxPQUFPO1FBQ0xDLE1BQU07UUFDTkMsTUFBTTtRQUNOQyxNQUFNO1FBQ05DLE9BQU87UUFDUEMsTUFBTTtJQUNSO0lBQ0FDLFVBQVU7UUFDUkMsU0FBUztRQUNUQyxTQUFTO1FBQ1RDLE9BQU87UUFDUEMsTUFBTTtJQUNSO0FBQ0YsRUFBVztBQUVKLE1BQU1DLHFCQUFxQjtJQUNoQ0MsWUFBWTtJQUNaQyxRQUFRO0lBQ1JDLGVBQWU7SUFDZkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLFNBQVM7QUFDWCxFQUFXO0FBRUosTUFBTUMsbUJBQW1CO0lBQzlCQyxTQUFTO1FBQ1BDLGVBQWU7UUFDZkMsZUFBZTtJQUNqQjtJQUNBQyxTQUFTO1FBQ1BDLGtCQUFrQjtRQUNsQkMsa0JBQWtCO0lBQ3BCO0FBQ0YsRUFBVztBQUVKLE1BQU1DLGlCQUFpQjtJQUM1QkMsU0FBUztJQUNUL0MsU0FBUztJQUNUZ0QsUUFBUTtJQUNSQyxZQUFZO0lBQ1pDLFVBQVU7SUFDVkMsV0FBVztJQUNYQyxTQUFTO0FBQ1gsRUFBVztBQUVKLE1BQU1DLGVBQWU7SUFDMUJwQyxPQUFPO0lBQ1BxQyxXQUFXO0lBQ1hDLGtCQUFrQjtBQUNwQixFQUFXIiwic291cmNlcyI6WyJDOlxcRWJ0dGlrYXIgSW50ZWxsaWdlbmNlIFByb2plY3RzXFxUZXN0LUNoYXQtQXBwXFxsaWJcXGNvbnN0YW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgQVBQX0NPTkZJRyA9IHtcbiAgbmFtZTogJ0NoYXQgQXBwbGljYXRpb24nLFxuICB2ZXJzaW9uOiAnMS4wLjAnLFxuICBkZXNjcmlwdGlvbjogJ01vZGVybiBjaGF0IGFwcGxpY2F0aW9uIHdpdGggbjhuIHdvcmtmbG93IGludGVncmF0aW9uJyxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBBUElfQ09ORklHID0ge1xuICBuOG46IHtcbiAgICB3ZWJob29rVXJsOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19OOE5fV0VCSE9PS19VUkwgfHwgJ2h0dHBzOi8veW91ci1uOG4taW5zdGFuY2UuY29tL3dlYmhvb2svY2hhdCcsXG4gICAgc3RyZWFtaW5nVXJsOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19OOE5fU1RSRUFNSU5HX1VSTCB8fCAnaHR0cHM6Ly95b3VyLW44bi1pbnN0YW5jZS5jb20vd2ViaG9vay9zdHJlYW0nLFxuICAgIHRpbWVvdXQ6IDMwMDAwLFxuICAgIHJldHJ5QXR0ZW1wdHM6IDMsXG4gICAgcmV0cnlEZWxheTogMTAwMCxcbiAgfSxcbiAgbW9ja0FwaToge1xuICAgIGJhc2VVcmw6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX01PQ0tBUElfQkFTRV9VUkwgfHwgJ2h0dHBzOi8vbW9ja2FwaS5pby9hcGkvdjEnLFxuICAgIHByb2plY3RJZDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfTU9DS0FQSV9QUk9KRUNUX0lEIHx8ICd5b3VyLXByb2plY3QtaWQnLFxuICAgIHRpbWVvdXQ6IDEwMDAwLFxuICB9LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFVJX0NPTkZJRyA9IHtcbiAgc2lkZWJhcjoge1xuICAgIHdpZHRoOiAyODAsXG4gICAgY29sbGFwc2VkV2lkdGg6IDY0LFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAyMDAsXG4gIH0sXG4gIGNoYXQ6IHtcbiAgICBtYXhNZXNzYWdlTGVuZ3RoOiA0MDAwLFxuICAgIHR5cGluZ0luZGljYXRvckRlbGF5OiA1MDAsXG4gICAgbWVzc2FnZVJldHJ5QXR0ZW1wdHM6IDMsXG4gIH0sXG4gIHRoZW1lOiB7XG4gICAgZGVmYXVsdFRoZW1lOiAnbGlnaHQnIGFzIGNvbnN0LFxuICAgIHN0b3JhZ2VLZXk6ICdjaGF0LXRoZW1lJyxcbiAgfSxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBDT0xPUlMgPSB7XG4gIGVhcnRoOiB7XG4gICAgc2FuZDogJyNmNWYwZTEnLFxuICAgIGNsYXk6ICcjZGFhNTc4JyxcbiAgICBtb3NzOiAnIzRjNmY0YScsXG4gICAgc3RvbmU6ICcjYTY5YjhlJyxcbiAgICBiYXJrOiAnIzY1NDMyMScsXG4gIH0sXG4gIHNlbWFudGljOiB7XG4gICAgc3VjY2VzczogJyMyMmM1NWUnLFxuICAgIHdhcm5pbmc6ICcjZjU5ZTBiJyxcbiAgICBlcnJvcjogJyNlZjQ0NDQnLFxuICAgIGluZm86ICcjM2I4MmY2JyxcbiAgfSxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBLRVlCT0FSRF9TSE9SVENVVFMgPSB7XG4gIG5ld1Nlc3Npb246ICdtb2QrbicsXG4gIHNlYXJjaDogJ21vZCtrJyxcbiAgdG9nZ2xlU2lkZWJhcjogJ21vZCtcXFxcJyxcbiAgdG9nZ2xlVGhlbWU6ICdtb2Qrc2hpZnQrdCcsXG4gIHNlbmRNZXNzYWdlOiAnZW50ZXInLFxuICBuZXdMaW5lOiAnc2hpZnQrZW50ZXInLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFZBTElEQVRJT05fUlVMRVMgPSB7XG4gIHNlc3Npb246IHtcbiAgICBuYW1lTWF4TGVuZ3RoOiAxMDAsXG4gICAgbmFtZU1pbkxlbmd0aDogMSxcbiAgfSxcbiAgbWVzc2FnZToge1xuICAgIGNvbnRlbnRNYXhMZW5ndGg6IDQwMDAsXG4gICAgY29udGVudE1pbkxlbmd0aDogMSxcbiAgfSxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9NRVNTQUdFUyA9IHtcbiAgbmV0d29yazogJ05ldHdvcmsgY29ubmVjdGlvbiBmYWlsZWQuIFBsZWFzZSBjaGVjayB5b3VyIGludGVybmV0IGNvbm5lY3Rpb24uJyxcbiAgdGltZW91dDogJ1JlcXVlc3QgdGltZWQgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLicsXG4gIHNlcnZlcjogJ1NlcnZlciBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nLFxuICB2YWxpZGF0aW9uOiAnSW52YWxpZCBpbnB1dC4gUGxlYXNlIGNoZWNrIHlvdXIgZGF0YS4nLFxuICBub3RGb3VuZDogJ1Jlc291cmNlIG5vdCBmb3VuZC4nLFxuICByYXRlTGltaXQ6ICdUb28gbWFueSByZXF1ZXN0cy4gUGxlYXNlIHdhaXQgYW5kIHRyeSBhZ2Fpbi4nLFxuICB1bmtub3duOiAnQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4nLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFNUT1JBR0VfS0VZUyA9IHtcbiAgdGhlbWU6ICdjaGF0LXRoZW1lJyxcbiAgc2Vzc2lvbklkOiAnY3VycmVudC1zZXNzaW9uLWlkJyxcbiAgc2lkZWJhckNvbGxhcHNlZDogJ3NpZGViYXItY29sbGFwc2VkJyxcbn0gYXMgY29uc3Q7Il0sIm5hbWVzIjpbIkFQUF9DT05GSUciLCJuYW1lIiwidmVyc2lvbiIsImRlc2NyaXB0aW9uIiwiQVBJX0NPTkZJRyIsIm44biIsIndlYmhvb2tVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfTjhOX1dFQkhPT0tfVVJMIiwic3RyZWFtaW5nVXJsIiwiTkVYVF9QVUJMSUNfTjhOX1NUUkVBTUlOR19VUkwiLCJ0aW1lb3V0IiwicmV0cnlBdHRlbXB0cyIsInJldHJ5RGVsYXkiLCJtb2NrQXBpIiwiYmFzZVVybCIsIk5FWFRfUFVCTElDX01PQ0tBUElfQkFTRV9VUkwiLCJwcm9qZWN0SWQiLCJORVhUX1BVQkxJQ19NT0NLQVBJX1BST0pFQ1RfSUQiLCJVSV9DT05GSUciLCJzaWRlYmFyIiwid2lkdGgiLCJjb2xsYXBzZWRXaWR0aCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiY2hhdCIsIm1heE1lc3NhZ2VMZW5ndGgiLCJ0eXBpbmdJbmRpY2F0b3JEZWxheSIsIm1lc3NhZ2VSZXRyeUF0dGVtcHRzIiwidGhlbWUiLCJkZWZhdWx0VGhlbWUiLCJzdG9yYWdlS2V5IiwiQ09MT1JTIiwiZWFydGgiLCJzYW5kIiwiY2xheSIsIm1vc3MiLCJzdG9uZSIsImJhcmsiLCJzZW1hbnRpYyIsInN1Y2Nlc3MiLCJ3YXJuaW5nIiwiZXJyb3IiLCJpbmZvIiwiS0VZQk9BUkRfU0hPUlRDVVRTIiwibmV3U2Vzc2lvbiIsInNlYXJjaCIsInRvZ2dsZVNpZGViYXIiLCJ0b2dnbGVUaGVtZSIsInNlbmRNZXNzYWdlIiwibmV3TGluZSIsIlZBTElEQVRJT05fUlVMRVMiLCJzZXNzaW9uIiwibmFtZU1heExlbmd0aCIsIm5hbWVNaW5MZW5ndGgiLCJtZXNzYWdlIiwiY29udGVudE1heExlbmd0aCIsImNvbnRlbnRNaW5MZW5ndGgiLCJFUlJPUl9NRVNTQUdFUyIsIm5ldHdvcmsiLCJzZXJ2ZXIiLCJ2YWxpZGF0aW9uIiwibm90Rm91bmQiLCJyYXRlTGltaXQiLCJ1bmtub3duIiwiU1RPUkFHRV9LRVlTIiwic2Vzc2lvbklkIiwic2lkZWJhckNvbGxhcHNlZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/constants.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/mockapi-client.ts":
/*!*******************************!*\
  !*** ./lib/mockapi-client.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockAPIClient: () => (/* binding */ MockAPIClient),\n/* harmony export */   MockAPIError: () => (/* binding */ MockAPIError),\n/* harmony export */   createMockAPIClient: () => (/* binding */ createMockAPIClient),\n/* harmony export */   mockAPIUtils: () => (/* binding */ mockAPIUtils),\n/* harmony export */   useMockAPIClient: () => (/* binding */ useMockAPIClient)\n/* harmony export */ });\n/**\n * MockAPI Client with localStorage fallback\n * Handles session and message persistence using MockAPI service or localStorage\n */ class MockAPIError extends Error {\n    constructor(message, status, details){\n        super(message), this.status = status, this.details = details;\n        this.name = 'MockAPIError';\n    }\n}\n// LocalStorage fallback implementation\nclass LocalStorageMockAPIClient {\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n    getStorageData(key) {\n        if (false) {}\n        try {\n            const data = localStorage.getItem(key);\n            return data ? JSON.parse(data) : [];\n        } catch (e) {\n            return [];\n        }\n    }\n    setStorageData(key, data) {\n        if (false) {}\n        try {\n            localStorage.setItem(key, JSON.stringify(data));\n        } catch (error) {\n            console.error('Failed to save to localStorage:', error);\n        }\n    }\n    // Session Management\n    async getSessions() {\n        const sessions = this.getStorageData(this.SESSIONS_KEY);\n        return sessions.map(this.transformSession);\n    }\n    async getSession(id) {\n        const sessions = this.getStorageData(this.SESSIONS_KEY);\n        const session = sessions.find((s)=>s.id === id);\n        return session ? this.transformSession(session) : null;\n    }\n    async createSession(name) {\n        const now = new Date().toISOString();\n        const sessionData = {\n            id: this.generateId(),\n            name,\n            createdAt: now,\n            updatedAt: now,\n            messageCount: 0,\n            lastActivity: now,\n            isActive: true\n        };\n        const sessions = this.getStorageData(this.SESSIONS_KEY);\n        sessions.push(sessionData);\n        this.setStorageData(this.SESSIONS_KEY, sessions);\n        return this.transformSession(sessionData);\n    }\n    async updateSession(id, updates) {\n        const sessions = this.getStorageData(this.SESSIONS_KEY);\n        const index = sessions.findIndex((s)=>s.id === id);\n        if (index === -1) {\n            throw new MockAPIError('Session not found', 404);\n        }\n        sessions[index] = {\n            ...sessions[index],\n            ...updates,\n            updatedAt: new Date().toISOString()\n        };\n        this.setStorageData(this.SESSIONS_KEY, sessions);\n        return this.transformSession(sessions[index]);\n    }\n    async deleteSession(id) {\n        const sessions = this.getStorageData(this.SESSIONS_KEY);\n        const filteredSessions = sessions.filter((s)=>s.id !== id);\n        this.setStorageData(this.SESSIONS_KEY, filteredSessions);\n        // Also delete associated messages\n        const messages = this.getStorageData(this.MESSAGES_KEY);\n        const filteredMessages = messages.filter((m)=>m.sessionId !== id);\n        this.setStorageData(this.MESSAGES_KEY, filteredMessages);\n    }\n    async updateSessionActivity(id) {\n        const sessions = this.getStorageData(this.SESSIONS_KEY);\n        const index = sessions.findIndex((s)=>s.id === id);\n        if (index !== -1) {\n            sessions[index].lastActivity = new Date().toISOString();\n            sessions[index].updatedAt = new Date().toISOString();\n            this.setStorageData(this.SESSIONS_KEY, sessions);\n        }\n    }\n    // Message Management\n    async getMessages(sessionId) {\n        const messages = this.getStorageData(this.MESSAGES_KEY);\n        return messages.filter((m)=>m.sessionId === sessionId).map(this.transformMessage).sort((a, b)=>new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n    }\n    async createMessage(message) {\n        var _message_responseData, _message_responseData1, _message_responseData2;\n        const messageId = this.generateId();\n        console.log('LocalStorage: Creating message with ID:', messageId, 'type:', message.type);\n        const messageData = {\n            id: messageId,\n            sessionId: message.sessionId,\n            content: message.content,\n            type: message.type,\n            timestamp: message.timestamp.toISOString(),\n            responseType: (_message_responseData = message.responseData) === null || _message_responseData === void 0 ? void 0 : _message_responseData.type,\n            responseContent: (_message_responseData1 = message.responseData) === null || _message_responseData1 === void 0 ? void 0 : _message_responseData1.content,\n            responseMetadata: (_message_responseData2 = message.responseData) === null || _message_responseData2 === void 0 ? void 0 : _message_responseData2.metadata\n        };\n        const messages = this.getStorageData(this.MESSAGES_KEY);\n        // Check if a similar message already exists (same content, type, session)\n        const existingMessage = messages.find((m)=>m.sessionId === message.sessionId && m.content === message.content && m.type === message.type && Math.abs(new Date(m.timestamp).getTime() - message.timestamp.getTime()) < 1000 // Within 1 second\n        );\n        if (existingMessage) {\n            console.log('LocalStorage: Similar message already exists, returning existing:', existingMessage.id);\n            return this.transformMessage(existingMessage);\n        }\n        messages.push(messageData);\n        this.setStorageData(this.MESSAGES_KEY, messages);\n        console.log('LocalStorage: Message saved successfully:', messageId);\n        // Update session message count\n        await this.incrementSessionMessageCount(message.sessionId);\n        return this.transformMessage(messageData);\n    }\n    async updateMessage(id, updates) {\n        var _updates_responseData, _updates_responseData1, _updates_responseData2;\n        const messages = this.getStorageData(this.MESSAGES_KEY);\n        const index = messages.findIndex((m)=>m.id === id);\n        if (index === -1) {\n            throw new MockAPIError('Message not found', 404);\n        }\n        messages[index] = {\n            ...messages[index],\n            content: updates.content || messages[index].content,\n            responseType: ((_updates_responseData = updates.responseData) === null || _updates_responseData === void 0 ? void 0 : _updates_responseData.type) || messages[index].responseType,\n            responseContent: ((_updates_responseData1 = updates.responseData) === null || _updates_responseData1 === void 0 ? void 0 : _updates_responseData1.content) || messages[index].responseContent,\n            responseMetadata: ((_updates_responseData2 = updates.responseData) === null || _updates_responseData2 === void 0 ? void 0 : _updates_responseData2.metadata) || messages[index].responseMetadata\n        };\n        this.setStorageData(this.MESSAGES_KEY, messages);\n        return this.transformMessage(messages[index]);\n    }\n    async deleteMessage(id) {\n        const messages = this.getStorageData(this.MESSAGES_KEY);\n        const filteredMessages = messages.filter((m)=>m.id !== id);\n        this.setStorageData(this.MESSAGES_KEY, filteredMessages);\n    }\n    async incrementSessionMessageCount(sessionId) {\n        const sessions = this.getStorageData(this.SESSIONS_KEY);\n        const index = sessions.findIndex((s)=>s.id === sessionId);\n        if (index !== -1) {\n            sessions[index].messageCount += 1;\n            sessions[index].lastActivity = new Date().toISOString();\n            sessions[index].updatedAt = new Date().toISOString();\n            this.setStorageData(this.SESSIONS_KEY, sessions);\n        }\n    }\n    transformSession(session) {\n        return {\n            id: session.id,\n            name: session.name,\n            createdAt: new Date(session.createdAt),\n            updatedAt: new Date(session.updatedAt),\n            messages: [],\n            metadata: {\n                messageCount: session.messageCount,\n                lastActivity: new Date(session.lastActivity),\n                isActive: session.isActive\n            }\n        };\n    }\n    transformMessage(message) {\n        let responseData = undefined;\n        if (message.responseType) {\n            // Check if stored content is the problematic mixed format\n            let processedContent = message.responseContent;\n            let processedType = message.responseType;\n            // If we have content that looks like mixed format but wasn't detected properly\n            if (processedContent && typeof processedContent === 'object' && !Array.isArray(processedContent)) {\n                const keys = Object.keys(processedContent);\n                const hasText = keys.some((key)=>key.startsWith('text'));\n                const hasChart = keys.some((key)=>key.startsWith('chart'));\n                if (hasText || hasChart) {\n                    // Convert to mixed format and wrap in array\n                    processedContent = [\n                        processedContent\n                    ];\n                    processedType = 'mixed';\n                    console.log('MockAPI: Converted stored mixed content to array format');\n                }\n            }\n            responseData = {\n                type: processedType,\n                content: processedContent,\n                metadata: message.responseMetadata\n            };\n        }\n        return {\n            id: message.id,\n            sessionId: message.sessionId,\n            content: message.content,\n            type: message.type,\n            timestamp: new Date(message.timestamp),\n            responseData\n        };\n    }\n    async healthCheck() {\n        return  true && 'localStorage' in window;\n    }\n    async clearAllData() {\n        if (true) {\n            localStorage.removeItem(this.SESSIONS_KEY);\n            localStorage.removeItem(this.MESSAGES_KEY);\n        }\n    }\n    constructor(){\n        this.SESSIONS_KEY = 'chat-sessions';\n        this.MESSAGES_KEY = 'chat-messages';\n    }\n}\nclass MockAPIClient {\n    /**\n   * Generic API request handler\n   */ async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        if (this.useFallback) {\n            throw new MockAPIError('Using fallback client', 0);\n        }\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const { timeout } = this.config;\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...options.headers\n                },\n                signal: AbortSignal.timeout(timeout),\n                ...options\n            });\n            if (!response.ok) {\n                throw new MockAPIError(\"HTTP \".concat(response.status, \": \").concat(response.statusText), response.status);\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            if (error instanceof MockAPIError) {\n                throw error;\n            }\n            if (error instanceof Error) {\n                if (error.name === 'TimeoutError') {\n                    throw new MockAPIError('Request timeout');\n                }\n                if (error.message.includes('fetch')) {\n                    throw new MockAPIError('Network error', undefined, error);\n                }\n            }\n            throw new MockAPIError('Unexpected error', undefined, error);\n        }\n    }\n    // Session Management\n    async getSessions() {\n        try {\n            if (this.useFallback) {\n                return await this.fallbackClient.getSessions();\n            }\n            const sessions = await this.request('/sessions');\n            return sessions.map(this.transformSession);\n        } catch (error) {\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.getSessions();\n        }\n    }\n    async getSession(id) {\n        try {\n            if (this.useFallback) {\n                return await this.fallbackClient.getSession(id);\n            }\n            const session = await this.request(\"/sessions/\".concat(id));\n            return this.transformSession(session);\n        } catch (error) {\n            if (error instanceof MockAPIError && error.status === 404) {\n                return null;\n            }\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.getSession(id);\n        }\n    }\n    async createSession(name) {\n        try {\n            if (this.useFallback) {\n                return await this.fallbackClient.createSession(name);\n            }\n            const now = new Date().toISOString();\n            const sessionData = {\n                name,\n                createdAt: now,\n                updatedAt: now,\n                messageCount: 0,\n                lastActivity: now,\n                isActive: true\n            };\n            const session = await this.request('/sessions', {\n                method: 'POST',\n                body: JSON.stringify(sessionData)\n            });\n            return this.transformSession(session);\n        } catch (error) {\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.createSession(name);\n        }\n    }\n    async updateSession(id, updates) {\n        try {\n            if (this.useFallback) {\n                return await this.fallbackClient.updateSession(id, updates);\n            }\n            const updateData = {\n                ...updates,\n                updatedAt: new Date().toISOString()\n            };\n            const session = await this.request(\"/sessions/\".concat(id), {\n                method: 'PUT',\n                body: JSON.stringify(updateData)\n            });\n            return this.transformSession(session);\n        } catch (error) {\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.updateSession(id, updates);\n        }\n    }\n    async deleteSession(id) {\n        try {\n            if (this.useFallback) {\n                return await this.fallbackClient.deleteSession(id);\n            }\n            await this.request(\"/sessions/\".concat(id), {\n                method: 'DELETE'\n            });\n        } catch (error) {\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.deleteSession(id);\n        }\n    }\n    async updateSessionActivity(id) {\n        try {\n            if (this.useFallback) {\n                return await this.fallbackClient.updateSessionActivity(id);\n            }\n            const updateData = {\n                lastActivity: new Date().toISOString(),\n                updatedAt: new Date().toISOString()\n            };\n            await this.request(\"/sessions/\".concat(id), {\n                method: 'PUT',\n                body: JSON.stringify(updateData)\n            });\n        } catch (error) {\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.updateSessionActivity(id);\n        }\n    }\n    // Message Management\n    async getMessages(sessionId) {\n        try {\n            if (this.useFallback) {\n                return await this.fallbackClient.getMessages(sessionId);\n            }\n            const messages = await this.request(\"/messages?sessionId=\".concat(sessionId));\n            return messages.map(this.transformMessage).sort((a, b)=>new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n        } catch (error) {\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.getMessages(sessionId);\n        }\n    }\n    async createMessage(message) {\n        try {\n            var _message_responseData, _message_responseData1, _message_responseData2;\n            if (this.useFallback) {\n                return await this.fallbackClient.createMessage(message);\n            }\n            const messageData = {\n                sessionId: message.sessionId,\n                content: message.content,\n                type: message.type,\n                timestamp: message.timestamp.toISOString(),\n                responseType: (_message_responseData = message.responseData) === null || _message_responseData === void 0 ? void 0 : _message_responseData.type,\n                responseContent: (_message_responseData1 = message.responseData) === null || _message_responseData1 === void 0 ? void 0 : _message_responseData1.content,\n                responseMetadata: (_message_responseData2 = message.responseData) === null || _message_responseData2 === void 0 ? void 0 : _message_responseData2.metadata\n            };\n            const createdMessage = await this.request('/messages', {\n                method: 'POST',\n                body: JSON.stringify(messageData)\n            });\n            // Update session message count and activity\n            await this.incrementSessionMessageCount(message.sessionId);\n            return this.transformMessage(createdMessage);\n        } catch (error) {\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.createMessage(message);\n        }\n    }\n    async updateMessage(id, updates) {\n        try {\n            var _updates_responseData, _updates_responseData1, _updates_responseData2;\n            if (this.useFallback) {\n                return await this.fallbackClient.updateMessage(id, updates);\n            }\n            const updateData = {\n                content: updates.content,\n                responseType: (_updates_responseData = updates.responseData) === null || _updates_responseData === void 0 ? void 0 : _updates_responseData.type,\n                responseContent: (_updates_responseData1 = updates.responseData) === null || _updates_responseData1 === void 0 ? void 0 : _updates_responseData1.content,\n                responseMetadata: (_updates_responseData2 = updates.responseData) === null || _updates_responseData2 === void 0 ? void 0 : _updates_responseData2.metadata\n            };\n            const message = await this.request(\"/messages/\".concat(id), {\n                method: 'PUT',\n                body: JSON.stringify(updateData)\n            });\n            return this.transformMessage(message);\n        } catch (error) {\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.updateMessage(id, updates);\n        }\n    }\n    async deleteMessage(id) {\n        try {\n            if (this.useFallback) {\n                return await this.fallbackClient.deleteMessage(id);\n            }\n            await this.request(\"/messages/\".concat(id), {\n                method: 'DELETE'\n            });\n        } catch (error) {\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.deleteMessage(id);\n        }\n    }\n    // Utility Methods\n    async incrementSessionMessageCount(sessionId) {\n        const session = await this.getSession(sessionId);\n        if (session) {\n            try {\n                await this.request(\"/sessions/\".concat(sessionId), {\n                    method: 'PUT',\n                    body: JSON.stringify({\n                        messageCount: session.metadata.messageCount + 1,\n                        lastActivity: new Date().toISOString(),\n                        updatedAt: new Date().toISOString()\n                    })\n                });\n            } catch (error) {\n                console.warn('Failed to update session message count:', error);\n            }\n        }\n    }\n    transformSession(session) {\n        return {\n            id: session.id,\n            name: session.name,\n            createdAt: new Date(session.createdAt),\n            updatedAt: new Date(session.updatedAt),\n            messages: [],\n            metadata: {\n                messageCount: session.messageCount,\n                lastActivity: new Date(session.lastActivity),\n                isActive: session.isActive\n            }\n        };\n    }\n    transformMessage(message) {\n        let responseData = undefined;\n        if (message.responseType) {\n            // Check if stored content is the problematic mixed format\n            let processedContent = message.responseContent;\n            let processedType = message.responseType;\n            // If we have content that looks like mixed format but wasn't detected properly\n            if (processedContent && typeof processedContent === 'object' && !Array.isArray(processedContent)) {\n                const keys = Object.keys(processedContent);\n                const hasText = keys.some((key)=>key.startsWith('text'));\n                const hasChart = keys.some((key)=>key.startsWith('chart'));\n                if (hasText || hasChart) {\n                    // Convert to mixed format and wrap in array\n                    processedContent = [\n                        processedContent\n                    ];\n                    processedType = 'mixed';\n                    console.log('MockAPI: Converted stored mixed content to array format');\n                }\n            }\n            responseData = {\n                type: processedType,\n                content: processedContent,\n                metadata: message.responseMetadata\n            };\n        }\n        return {\n            id: message.id,\n            sessionId: message.sessionId,\n            content: message.content,\n            type: message.type,\n            timestamp: new Date(message.timestamp),\n            responseData\n        };\n    }\n    async healthCheck() {\n        try {\n            if (this.useFallback) {\n                return await this.fallbackClient.healthCheck();\n            }\n            await this.request('/sessions?limit=1');\n            return true;\n        } catch (e) {\n            return await this.fallbackClient.healthCheck();\n        }\n    }\n    async clearAllData() {\n        try {\n            if (this.useFallback) {\n                return await this.fallbackClient.clearAllData();\n            }\n            const [sessions, messages] = await Promise.all([\n                this.getSessions(),\n                this.request('/messages')\n            ]);\n            // Delete all messages\n            await Promise.all(messages.map((message)=>this.deleteMessage(message.id)));\n            // Delete all sessions\n            await Promise.all(sessions.map((session)=>this.deleteSession(session.id)));\n        } catch (error) {\n            console.warn('MockAPI failed, using localStorage fallback:', error);\n            return await this.fallbackClient.clearAllData();\n        }\n    }\n    constructor(config){\n        this.useFallback = false;\n        this.config = {\n            timeout: 10000,\n            ...config\n        };\n        this.baseUrl = \"\".concat(this.config.baseUrl, \"/projects/\").concat(this.config.projectId);\n        this.fallbackClient = new LocalStorageMockAPIClient();\n        // Check if we should use fallback (invalid URLs indicate development mode)\n        this.useFallback = config.baseUrl.includes('mockapi.io') && config.projectId === 'your-project-id';\n    }\n}\n// Factory function\nfunction createMockAPIClient(config) {\n    return new MockAPIClient(config);\n}\n// Hook for React components\nfunction useMockAPIClient() {\n    const client = createMockAPIClient({\n        baseUrl: \"https://mockapi.io/api/v1\" || 0,\n        projectId: \"your-project-id\" || 0\n    });\n    return client;\n}\n// Utility functions\nconst mockAPIUtils = {\n    /**\n   * Format error for user display\n   */ formatError (error) {\n        if (error.status === 404) {\n            return 'Resource not found';\n        }\n        if (error.status === 429) {\n            return 'Too many requests. Please wait and try again.';\n        }\n        if (error.status && error.status >= 500) {\n            return 'Server error. Please try again later.';\n        }\n        return 'An error occurred. Please try again.';\n    },\n    /**\n   * Validate session name\n   */ validateSessionName (name) {\n        if (!name.trim()) {\n            return 'Session name cannot be empty';\n        }\n        if (name.length > 100) {\n            return 'Session name cannot exceed 100 characters';\n        }\n        return null;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/mockapi-client.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/n8n-client.ts":
/*!***************************!*\
  !*** ./lib/n8n-client.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   N8NClient: () => (/* binding */ N8NClient),\n/* harmony export */   N8NError: () => (/* binding */ N8NError),\n/* harmony export */   createN8NClient: () => (/* binding */ createN8NClient),\n/* harmony export */   n8nClientExample: () => (/* binding */ n8nClientExample),\n/* harmony export */   n8nUtils: () => (/* binding */ n8nUtils)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/**\n * n8n Webhook Client\n * Handles communication with n8n workflows via webhook and streaming endpoints\n */ class N8NError extends Error {\n    constructor(message, type, details){\n        super(message), this.type = type, this.details = details;\n        this.name = 'N8NError';\n    }\n}\nclass N8NClient {\n    /**\n   * Send a message to n8n webhook\n   */ async sendMessage(request) {\n        const { webhookUrl, timeout } = this.config;\n        try {\n            console.log('=== N8N WEBHOOK DEBUG ===');\n            console.log('Webhook URL:', webhookUrl);\n            console.log('Request payload:', JSON.stringify(request, null, 2));\n            const response = await fetch(webhookUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify(request)\n            });\n            console.log('Response status:', response.status);\n            console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('Error response body:', errorText);\n                throw new N8NError(\"HTTP \".concat(response.status, \": \").concat(response.statusText), 'server', {\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: errorText\n                });\n            }\n            const responseText = await response.text();\n            console.log('Raw response:', responseText);\n            let data;\n            try {\n                data = JSON.parse(responseText);\n            } catch (parseError) {\n                console.log('Response is not JSON, treating as plain text');\n                data = responseText;\n            }\n            console.log('Parsed response data:', data);\n            const validatedResponse = this.validateResponse(data);\n            console.log('Validated response:', validatedResponse);\n            console.log('=== END N8N WEBHOOK DEBUG ===');\n            return validatedResponse;\n        } catch (error) {\n            console.error('=== N8N WEBHOOK ERROR ===');\n            console.error('Error details:', error);\n            console.error('Error type:', error instanceof Error ? error.constructor.name : typeof error);\n            console.error('Error message:', error instanceof Error ? error.message : String(error));\n            console.error('=== END N8N WEBHOOK ERROR ===');\n            if (error instanceof Error) {\n                if (error.name === 'TimeoutError' || error.name === 'AbortError') {\n                    throw new N8NError('Request timeout', 'timeout');\n                }\n                if (error.message.includes('fetch') || error.message.includes('network')) {\n                    throw new N8NError('Network error', 'network', error);\n                }\n            }\n            throw error;\n        }\n    }\n    /**\n   * Set up streaming connection for real-time updates\n   */ async *streamMessages(sessionId) {\n        const { streamingUrl } = this.config;\n        const url = new URL(streamingUrl);\n        url.searchParams.set('sessionId', sessionId);\n        try {\n            var _response_body;\n            const response = await fetch(url.toString(), {\n                headers: {\n                    'Accept': 'text/event-stream',\n                    'Cache-Control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                throw new N8NError(\"Streaming failed: \".concat(response.status), 'server', {\n                    status: response.status\n                });\n            }\n            const reader = (_response_body = response.body) === null || _response_body === void 0 ? void 0 : _response_body.getReader();\n            if (!reader) {\n                throw new N8NError('No response body', 'server');\n            }\n            const decoder = new TextDecoder();\n            let buffer = '';\n            try {\n                while(true){\n                    const { done, value } = await reader.read();\n                    if (done) break;\n                    buffer += decoder.decode(value, {\n                        stream: true\n                    });\n                    const lines = buffer.split('\\n');\n                    // Keep the last incomplete line in buffer\n                    buffer = lines.pop() || '';\n                    for (const line of lines){\n                        if (line.trim() === '') continue;\n                        if (line.startsWith('data: ')) {\n                            const data = line.slice(6);\n                            if (data === '[DONE]') {\n                                return;\n                            }\n                            try {\n                                const parsed = JSON.parse(data);\n                                const response = this.validateResponse(parsed);\n                                yield response;\n                            } catch (error) {\n                                console.warn('Failed to parse streaming data:', error);\n                            }\n                        }\n                    }\n                }\n            } finally{\n                reader.releaseLock();\n            }\n        } catch (error) {\n            if (error instanceof N8NError) {\n                throw error;\n            }\n            throw new N8NError('Streaming connection failed', 'network', error);\n        }\n    }\n    /**\n   * Send message with retry logic\n   */ async sendMessageWithRetry(request) {\n        const { retryAttempts, retryDelay } = this.config;\n        for(let attempt = 1; attempt <= retryAttempts; attempt++){\n            try {\n                return await this.sendMessage(request);\n            } catch (error) {\n                if (error instanceof N8NError) {\n                    // Don't retry validation errors\n                    if (error.type === 'validation') {\n                        throw error;\n                    }\n                    // Don't retry on final attempt\n                    if (attempt === retryAttempts) {\n                        throw error;\n                    }\n                    // Wait before retry\n                    await new Promise((resolve)=>setTimeout(resolve, retryDelay * attempt));\n                } else {\n                    throw error;\n                }\n            }\n        }\n        throw new N8NError('Max retry attempts reached', 'network');\n    }\n    /**\n   * Remove duplicate content from response\n   */ deduplicateContent(content) {\n        if (typeof content !== 'string') {\n            return content;\n        }\n        // Split content into lines\n        const lines = content.split('\\n');\n        const seenLines = new Set();\n        const deduplicatedLines = [];\n        for (const line of lines){\n            const trimmedLine = line.trim();\n            // Skip empty lines for deduplication check\n            if (trimmedLine === '') {\n                deduplicatedLines.push(line);\n                continue;\n            }\n            // If we haven't seen this line before, add it\n            if (!seenLines.has(trimmedLine)) {\n                seenLines.add(trimmedLine);\n                deduplicatedLines.push(line);\n            }\n        }\n        return deduplicatedLines.join('\\n');\n    }\n    /**\n   * Detect if content is mixed format (contains text and chart keys)\n   */ isMixedContent(content) {\n        if (!Array.isArray(content)) return false;\n        return content.some((item)=>{\n            if (!item || typeof item !== 'object') return false;\n            const keys = Object.keys(item);\n            const hasText = keys.some((key)=>key.startsWith('text'));\n            const hasChart = keys.some((key)=>key.startsWith('chart'));\n            return hasText || hasChart;\n        });\n    }\n    /**\n   * Validate n8n response format\n   */ validateResponse(data) {\n        if (!data || typeof data !== 'object') {\n            // If we get a simple response, wrap it in our expected format\n            return {\n                type: 'final',\n                messageType: 'text',\n                content: String(data),\n                metadata: {\n                    timestamp: new Date()\n                }\n            };\n        }\n        // Check if response already has our expected format\n        if (data.type && data.messageType && data.content !== undefined) {\n            return {\n                type: data.type,\n                messageType: data.messageType,\n                content: data.messageType === 'text' ? this.deduplicateContent(data.content) : data.content,\n                metadata: data.metadata || {\n                    timestamp: new Date()\n                }\n            };\n        }\n        // Handle various possible n8n response formats\n        let content = data.content || data.message || data.response || data.text || data.output || data;\n        let messageType = data.messageType || data.format || 'text';\n        let type = data.type || 'final';\n        // Special handling for n8n output field that contains JSON string\n        if (data.output && typeof data.output === 'string') {\n            try {\n                const parsedOutput = JSON.parse(data.output);\n                if (parsedOutput && typeof parsedOutput === 'object') {\n                    // If the output contains a valid JSON object, use it as the base\n                    content = parsedOutput.content || parsedOutput;\n                    messageType = parsedOutput.messageType || messageType;\n                    type = parsedOutput.type || type;\n                }\n            } catch (error) {\n                // If parsing fails, treat output as regular text content\n                console.warn('Failed to parse n8n output as JSON:', error);\n            }\n        }\n        // Check if this is a mixed content response (array with text/chart combinations)\n        if (this.isMixedContent(content)) {\n            messageType = 'mixed';\n        } else if (Array.isArray(content)) {\n            // If it's an array but not mixed content, treat as JSON\n            messageType = 'json';\n        }\n        // Validate messageType\n        if (![\n            'text',\n            'json',\n            'image',\n            'chart',\n            'error',\n            'mixed'\n        ].includes(messageType)) {\n            messageType = 'text';\n        }\n        // Validate type\n        if (![\n            'interim',\n            'final'\n        ].includes(type)) {\n            type = 'final';\n        }\n        return {\n            type,\n            messageType,\n            content: messageType === 'text' ? this.deduplicateContent(content) : content,\n            metadata: data.metadata || {\n                timestamp: new Date(),\n                source: 'n8n-webhook',\n                originalResponse: data\n            }\n        };\n    }\n    /**\n   * Cancel ongoing request\n   */ cancel() {\n        // Requests now use AbortSignal.timeout() which auto-cancels\n        console.log('Cancel requested - using timeout-based cancellation');\n    }\n    /**\n   * Health check endpoint\n   */ async healthCheck() {\n        try {\n            const response = await fetch(\"\".concat(this.config.webhookUrl, \"/health\"), {\n                method: 'GET',\n                signal: AbortSignal.timeout(5000)\n            });\n            return response.ok;\n        } catch (e) {\n            return false;\n        }\n    }\n    constructor(config){\n        this.config = {\n            timeout: 120000,\n            retryAttempts: 3,\n            retryDelay: 1000,\n            ...config\n        };\n    }\n}\n// Factory function for creating client instances\nfunction createN8NClient(config) {\n    return new N8NClient(config);\n}\n// Example usage\nconst n8nClientExample = ()=>{\n    const client = createN8NClient({\n        webhookUrl: process.env.N8N_WEBHOOK_URL,\n        streamingUrl: process.env.N8N_STREAMING_URL,\n        timeout: 30000,\n        retryAttempts: 3,\n        retryDelay: 1000\n    });\n    // Example: Send message\n    const sendMessage = async ()=>{\n        try {\n            const request = {\n                username: 'user123',\n                message: 'Hello, can you analyze this data?',\n                sessionId: 'session-123',\n                timestamp: new Date()\n            };\n            const response = await client.sendMessageWithRetry(request);\n            console.log('Response:', response);\n        } catch (error) {\n            if (error instanceof N8NError) {\n                console.error('N8N Error:', error.message, error.type);\n            } else {\n                console.error('Unexpected error:', error);\n            }\n        }\n    };\n    // Example: Stream messages\n    const streamMessages = async ()=>{\n        try {\n            const sessionId = 'session-123';\n            for await (const response of client.streamMessages(sessionId)){\n                console.log('Streaming response:', response);\n                if (response.type === 'final') {\n                    break;\n                }\n            }\n        } catch (error) {\n            console.error('Streaming error:', error);\n        }\n    };\n    return {\n        sendMessage,\n        streamMessages\n    };\n};\n// Utility functions for common operations\nconst n8nUtils = {\n    /**\n   * Format error for user display\n   */ formatError (error) {\n        switch(error.type){\n            case 'network':\n                return 'Network connection failed. Please check your internet connection.';\n            case 'timeout':\n                return 'Request timed out. The workflow may be taking longer than expected.';\n            case 'server':\n                return 'Server error occurred. Please try again later.';\n            case 'validation':\n                return 'Invalid data format. Please contact support.';\n            default:\n                return 'An unexpected error occurred. Please try again.';\n        }\n    },\n    /**\n   * Check if response is interim message\n   */ isInterimMessage (response) {\n        return response.type === 'interim';\n    },\n    /**\n   * Check if response is final message\n   */ isFinalMessage (response) {\n        return response.type === 'final';\n    },\n    /**\n   * Extract processing time from metadata\n   */ getProcessingTime (response) {\n        var _response_metadata;\n        return ((_response_metadata = response.metadata) === null || _response_metadata === void 0 ? void 0 : _response_metadata.processingTime) || null;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/n8n-client.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Capp%5C%5Cproviders.tsx%22%2C%22ids%22%3A%5B%22Providers%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Montserrat%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%2C%5C%22display%5C%22%3A%5C%22swap%5C%22%2C%5C%22variable%5C%22%3A%5C%22--font-montserrat%5C%22%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22montserrat%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Capp%5C%5Cproviders.tsx%22%2C%22ids%22%3A%5B%22Providers%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Montserrat%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%2C%5C%22display%5C%22%3A%5C%22swap%5C%22%2C%5C%22variable%5C%22%3A%5C%22--font-montserrat%5C%22%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22montserrat%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/providers.tsx */ \"(app-pages-browser)/./app/providers.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Montserrat\",\"arguments\":[{\"subsets\":[\"latin\"],\"display\":\"swap\",\"variable\":\"--font-montserrat\"}],\"variableName\":\"montserrat\"} */ \"(app-pages-browser)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Montserrat\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"],\\\"display\\\":\\\"swap\\\",\\\"variable\\\":\\\"--font-montserrat\\\"}],\\\"variableName\\\":\\\"montserrat\\\"}\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/globals.css */ \"(app-pages-browser)/./app/globals.css\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q0VidHRpa2FyJTIwSW50ZWxsaWdlbmNlJTIwUHJvamVjdHMlNUMlNUNUZXN0LUNoYXQtQXBwJTVDJTVDYXBwJTVDJTVDcHJvdmlkZXJzLnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiUyMlByb3ZpZGVycyUyMiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDRWJ0dGlrYXIlMjBJbnRlbGxpZ2VuY2UlMjBQcm9qZWN0cyU1QyU1Q1Rlc3QtQ2hhdC1BcHAlNUMlNUNub2RlX21vZHVsZXMlNUMlNUNuZXh0JTVDJTVDZm9udCU1QyU1Q2dvb2dsZSU1QyU1Q3RhcmdldC5jc3MlM0YlN0IlNUMlMjJwYXRoJTVDJTIyJTNBJTVDJTIyYXBwJTVDJTVDJTVDJTVDbGF5b3V0LnRzeCU1QyUyMiUyQyU1QyUyMmltcG9ydCU1QyUyMiUzQSU1QyUyMk1vbnRzZXJyYXQlNUMlMjIlMkMlNUMlMjJhcmd1bWVudHMlNUMlMjIlM0ElNUIlN0IlNUMlMjJzdWJzZXRzJTVDJTIyJTNBJTVCJTVDJTIybGF0aW4lNUMlMjIlNUQlMkMlNUMlMjJkaXNwbGF5JTVDJTIyJTNBJTVDJTIyc3dhcCU1QyUyMiUyQyU1QyUyMnZhcmlhYmxlJTVDJTIyJTNBJTVDJTIyLS1mb250LW1vbnRzZXJyYXQlNUMlMjIlN0QlNUQlMkMlNUMlMjJ2YXJpYWJsZU5hbWUlNUMlMjIlM0ElNUMlMjJtb250c2VycmF0JTVDJTIyJTdEJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNFYnR0aWthciUyMEludGVsbGlnZW5jZSUyMFByb2plY3RzJTVDJTVDVGVzdC1DaGF0LUFwcCU1QyU1Q2FwcCU1QyU1Q2dsb2JhbHMuY3NzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsZ0tBQXlJO0FBQ3pJO0FBQ0Esa2pCQUFpVTtBQUNqVTtBQUNBLDRKQUF3RyIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiLCB3ZWJwYWNrRXhwb3J0czogW1wiUHJvdmlkZXJzXCJdICovIFwiQzpcXFxcRWJ0dGlrYXIgSW50ZWxsaWdlbmNlIFByb2plY3RzXFxcXFRlc3QtQ2hhdC1BcHBcXFxcYXBwXFxcXHByb3ZpZGVycy50c3hcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXEVidHRpa2FyIEludGVsbGlnZW5jZSBQcm9qZWN0c1xcXFxUZXN0LUNoYXQtQXBwXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGZvbnRcXFxcZ29vZ2xlXFxcXHRhcmdldC5jc3M/e1xcXCJwYXRoXFxcIjpcXFwiYXBwXFxcXFxcXFxsYXlvdXQudHN4XFxcIixcXFwiaW1wb3J0XFxcIjpcXFwiTW9udHNlcnJhdFxcXCIsXFxcImFyZ3VtZW50c1xcXCI6W3tcXFwic3Vic2V0c1xcXCI6W1xcXCJsYXRpblxcXCJdLFxcXCJkaXNwbGF5XFxcIjpcXFwic3dhcFxcXCIsXFxcInZhcmlhYmxlXFxcIjpcXFwiLS1mb250LW1vbnRzZXJyYXRcXFwifV0sXFxcInZhcmlhYmxlTmFtZVxcXCI6XFxcIm1vbnRzZXJyYXRcXFwifVwiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcRWJ0dGlrYXIgSW50ZWxsaWdlbmNlIFByb2plY3RzXFxcXFRlc3QtQ2hhdC1BcHBcXFxcYXBwXFxcXGdsb2JhbHMuY3NzXCIpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Capp%5C%5Cproviders.tsx%22%2C%22ids%22%3A%5B%22Providers%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Montserrat%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%2C%5C%22display%5C%22%3A%5C%22swap%5C%22%2C%5C%22variable%5C%22%3A%5C%22--font-montserrat%5C%22%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22montserrat%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(()=>{\"use strict\";var e={432:(e,r,t)=>{var n=t(887);var i=Object.create(null);var a=typeof document===\"undefined\";var o=Array.prototype.forEach;function debounce(e,r){var t=0;return function(){var n=this;var i=arguments;var a=function functionCall(){return e.apply(n,i)};clearTimeout(t);t=setTimeout(a,r)}}function noop(){}function getCurrentScriptUrl(e){var r=i[e];if(!r){if(document.currentScript){r=document.currentScript.src}else{var t=document.getElementsByTagName(\"script\");var a=t[t.length-1];if(a){r=a.src}}i[e]=r}return function(e){if(!r){return null}var t=r.split(/([^\\\\/]+)\\.js$/);var i=t&&t[1];if(!i){return[r.replace(\".js\",\".css\")]}if(!e){return[r.replace(\".js\",\".css\")]}return e.split(\",\").map((function(e){var t=new RegExp(\"\".concat(i,\"\\\\.js$\"),\"g\");return n(r.replace(t,\"\".concat(e.replace(/{fileName}/g,i),\".css\")))}))}}function updateCss(e,r){if(!r){if(!e.href){return}r=e.href.split(\"?\")[0]}if(!isUrlRequest(r)){return}if(e.isLoaded===false){return}if(!r||!(r.indexOf(\".css\")>-1)){return}e.visited=true;var t=e.cloneNode();t.isLoaded=false;t.addEventListener(\"load\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.addEventListener(\"error\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.href=\"\".concat(r,\"?\").concat(Date.now());if(e.nextSibling){e.parentNode.insertBefore(t,e.nextSibling)}else{e.parentNode.appendChild(t)}}function getReloadUrl(e,r){var t;e=n(e,{stripWWW:false});r.some((function(n){if(e.indexOf(r)>-1){t=n}}));return t}function reloadStyle(e){if(!e){return false}var r=document.querySelectorAll(\"link\");var t=false;o.call(r,(function(r){if(!r.href){return}var n=getReloadUrl(r.href,e);if(!isUrlRequest(n)){return}if(r.visited===true){return}if(n){updateCss(r,n);t=true}}));return t}function reloadAll(){var e=document.querySelectorAll(\"link\");o.call(e,(function(e){if(e.visited===true){return}updateCss(e)}))}function isUrlRequest(e){if(!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)){return false}return true}e.exports=function(e,r){if(a){console.log(\"no window.document found, will not HMR CSS\");return noop}var t=getCurrentScriptUrl(e);function update(){var e=t(r.filename);var n=reloadStyle(e);if(r.locals){console.log(\"[HMR] Detected local css modules. Reload all css\");reloadAll();return}if(n){console.log(\"[HMR] css reload %s\",e.join(\" \"))}else{console.log(\"[HMR] Reload all css\");reloadAll()}}return debounce(update,50)}},887:e=>{function normalizeUrl(e){return e.reduce((function(e,r){switch(r){case\"..\":e.pop();break;case\".\":break;default:e.push(r)}return e}),[]).join(\"/\")}e.exports=function(e){e=e.trim();if(/^data:/i.test(e)){return e}var r=e.indexOf(\"//\")!==-1?e.split(\"//\")[0]+\"//\":\"\";var t=e.replace(new RegExp(r,\"i\"),\"\").split(\"/\");var n=t[0].toLowerCase().replace(/\\.$/,\"\");t[0]=\"\";var i=normalizeUrl(t);return r+n+i}}};var r={};function __nccwpck_require__(t){var n=r[t];if(n!==undefined){return n.exports}var i=r[t]={exports:{}};var a=true;try{e[t](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(432);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLGFBQWEsT0FBTyxjQUFjLGFBQWEsMEJBQTBCLG9DQUFvQyw4QkFBOEIsdUJBQXVCLFFBQVEsa0JBQWtCLFdBQVcsZ0JBQWdCLDhCQUE4QixxQkFBcUIsZ0JBQWdCLG1CQUFtQixpQkFBaUIsZ0NBQWdDLFdBQVcsT0FBTywyQkFBMkIsNkJBQTZCLEtBQUssOENBQThDLG9CQUFvQixNQUFNLFNBQVMsT0FBTyxtQkFBbUIsT0FBTyxZQUFZLGdDQUFnQyxjQUFjLE9BQU8sZ0NBQWdDLE9BQU8sZ0NBQWdDLHFDQUFxQyw0Q0FBNEMsMkNBQTJDLFNBQVMsZ0JBQWdCLElBQUksd0JBQXdCLE9BQU8sWUFBWSxPQUFPLHVCQUF1QixxQkFBcUIsT0FBTyx1QkFBdUIsT0FBTyxnQ0FBZ0MsT0FBTyxlQUFlLG9CQUFvQixpQkFBaUIsc0NBQXNDLGVBQWUsT0FBTyxnQkFBZ0IsNEJBQTRCLEdBQUcsdUNBQXVDLGVBQWUsT0FBTyxnQkFBZ0IsNEJBQTRCLEdBQUcsMkNBQTJDLGtCQUFrQiwyQ0FBMkMsS0FBSyw2QkFBNkIsMkJBQTJCLE1BQU0sT0FBTyxlQUFlLEVBQUUsb0JBQW9CLG9CQUFvQixLQUFLLEdBQUcsU0FBUyx3QkFBd0IsT0FBTyxhQUFhLHdDQUF3QyxZQUFZLHNCQUFzQixZQUFZLE9BQU8sNkJBQTZCLHFCQUFxQixPQUFPLHFCQUFxQixPQUFPLE1BQU0sZUFBZSxRQUFRLEdBQUcsU0FBUyxxQkFBcUIsd0NBQXdDLHNCQUFzQixxQkFBcUIsT0FBTyxhQUFhLEdBQUcseUJBQXlCLHlDQUF5QyxhQUFhLFlBQVksd0JBQXdCLE1BQU0sMERBQTBELFlBQVksNkJBQTZCLGtCQUFrQixvQkFBb0IscUJBQXFCLGFBQWEsZ0VBQWdFLFlBQVksT0FBTyxNQUFNLCtDQUErQyxLQUFLLG9DQUFvQyxhQUFhLDRCQUE0QixTQUFTLHlCQUF5QiwrQkFBK0IsVUFBVSxpQkFBaUIsTUFBTSxjQUFjLGtCQUFrQixTQUFTLGdCQUFnQixzQkFBc0IsV0FBVyxzQkFBc0IsU0FBUyxvREFBb0QsaURBQWlELDJDQUEyQyxRQUFRLHNCQUFzQixnQkFBZ0IsU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsiQzpcXEVidHRpa2FyIEludGVsbGlnZW5jZSBQcm9qZWN0c1xcVGVzdC1DaGF0LUFwcFxcbm9kZV9tb2R1bGVzXFxuZXh0XFxkaXN0XFxjb21waWxlZFxcbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXGhtclxcaG90TW9kdWxlUmVwbGFjZW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezQzMjooZSxyLHQpPT57dmFyIG49dCg4ODcpO3ZhciBpPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIGE9dHlwZW9mIGRvY3VtZW50PT09XCJ1bmRlZmluZWRcIjt2YXIgbz1BcnJheS5wcm90b3R5cGUuZm9yRWFjaDtmdW5jdGlvbiBkZWJvdW5jZShlLHIpe3ZhciB0PTA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpczt2YXIgaT1hcmd1bWVudHM7dmFyIGE9ZnVuY3Rpb24gZnVuY3Rpb25DYWxsKCl7cmV0dXJuIGUuYXBwbHkobixpKX07Y2xlYXJUaW1lb3V0KHQpO3Q9c2V0VGltZW91dChhLHIpfX1mdW5jdGlvbiBub29wKCl7fWZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRVcmwoZSl7dmFyIHI9aVtlXTtpZighcil7aWYoZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7cj1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY31lbHNle3ZhciB0PWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO3ZhciBhPXRbdC5sZW5ndGgtMV07aWYoYSl7cj1hLnNyY319aVtlXT1yfXJldHVybiBmdW5jdGlvbihlKXtpZighcil7cmV0dXJuIG51bGx9dmFyIHQ9ci5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTt2YXIgaT10JiZ0WzFdO2lmKCFpKXtyZXR1cm5bci5yZXBsYWNlKFwiLmpzXCIsXCIuY3NzXCIpXX1pZighZSl7cmV0dXJuW3IucmVwbGFjZShcIi5qc1wiLFwiLmNzc1wiKV19cmV0dXJuIGUuc3BsaXQoXCIsXCIpLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IFJlZ0V4cChcIlwiLmNvbmNhdChpLFwiXFxcXC5qcyRcIiksXCJnXCIpO3JldHVybiBuKHIucmVwbGFjZSh0LFwiXCIuY29uY2F0KGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLGkpLFwiLmNzc1wiKSkpfSkpfX1mdW5jdGlvbiB1cGRhdGVDc3MoZSxyKXtpZighcil7aWYoIWUuaHJlZil7cmV0dXJufXI9ZS5ocmVmLnNwbGl0KFwiP1wiKVswXX1pZighaXNVcmxSZXF1ZXN0KHIpKXtyZXR1cm59aWYoZS5pc0xvYWRlZD09PWZhbHNlKXtyZXR1cm59aWYoIXJ8fCEoci5pbmRleE9mKFwiLmNzc1wiKT4tMSkpe3JldHVybn1lLnZpc2l0ZWQ9dHJ1ZTt2YXIgdD1lLmNsb25lTm9kZSgpO3QuaXNMb2FkZWQ9ZmFsc2U7dC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLChmdW5jdGlvbigpe2lmKHQuaXNMb2FkZWQpe3JldHVybn10LmlzTG9hZGVkPXRydWU7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSkpO3QuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsKGZ1bmN0aW9uKCl7aWYodC5pc0xvYWRlZCl7cmV0dXJufXQuaXNMb2FkZWQ9dHJ1ZTtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9KSk7dC5ocmVmPVwiXCIuY29uY2F0KHIsXCI/XCIpLmNvbmNhdChEYXRlLm5vdygpKTtpZihlLm5leHRTaWJsaW5nKXtlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsZS5uZXh0U2libGluZyl9ZWxzZXtlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodCl9fWZ1bmN0aW9uIGdldFJlbG9hZFVybChlLHIpe3ZhciB0O2U9bihlLHtzdHJpcFdXVzpmYWxzZX0pO3Iuc29tZSgoZnVuY3Rpb24obil7aWYoZS5pbmRleE9mKHIpPi0xKXt0PW59fSkpO3JldHVybiB0fWZ1bmN0aW9uIHJlbG9hZFN0eWxlKGUpe2lmKCFlKXtyZXR1cm4gZmFsc2V9dmFyIHI9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7dmFyIHQ9ZmFsc2U7by5jYWxsKHIsKGZ1bmN0aW9uKHIpe2lmKCFyLmhyZWYpe3JldHVybn12YXIgbj1nZXRSZWxvYWRVcmwoci5ocmVmLGUpO2lmKCFpc1VybFJlcXVlc3Qobikpe3JldHVybn1pZihyLnZpc2l0ZWQ9PT10cnVlKXtyZXR1cm59aWYobil7dXBkYXRlQ3NzKHIsbik7dD10cnVlfX0pKTtyZXR1cm4gdH1mdW5jdGlvbiByZWxvYWRBbGwoKXt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwibGlua1wiKTtvLmNhbGwoZSwoZnVuY3Rpb24oZSl7aWYoZS52aXNpdGVkPT09dHJ1ZSl7cmV0dXJufXVwZGF0ZUNzcyhlKX0pKX1mdW5jdGlvbiBpc1VybFJlcXVlc3QoZSl7aWYoIS9eW2EtekEtWl1bYS16QS1aXFxkK1xcLS5dKjovLnRlc3QoZSkpe3JldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtpZihhKXtjb25zb2xlLmxvZyhcIm5vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTU1wiKTtyZXR1cm4gbm9vcH12YXIgdD1nZXRDdXJyZW50U2NyaXB0VXJsKGUpO2Z1bmN0aW9uIHVwZGF0ZSgpe3ZhciBlPXQoci5maWxlbmFtZSk7dmFyIG49cmVsb2FkU3R5bGUoZSk7aWYoci5sb2NhbHMpe2NvbnNvbGUubG9nKFwiW0hNUl0gRGV0ZWN0ZWQgbG9jYWwgY3NzIG1vZHVsZXMuIFJlbG9hZCBhbGwgY3NzXCIpO3JlbG9hZEFsbCgpO3JldHVybn1pZihuKXtjb25zb2xlLmxvZyhcIltITVJdIGNzcyByZWxvYWQgJXNcIixlLmpvaW4oXCIgXCIpKX1lbHNle2NvbnNvbGUubG9nKFwiW0hNUl0gUmVsb2FkIGFsbCBjc3NcIik7cmVsb2FkQWxsKCl9fXJldHVybiBkZWJvdW5jZSh1cGRhdGUsNTApfX0sODg3OmU9PntmdW5jdGlvbiBub3JtYWxpemVVcmwoZSl7cmV0dXJuIGUucmVkdWNlKChmdW5jdGlvbihlLHIpe3N3aXRjaChyKXtjYXNlXCIuLlwiOmUucG9wKCk7YnJlYWs7Y2FzZVwiLlwiOmJyZWFrO2RlZmF1bHQ6ZS5wdXNoKHIpfXJldHVybiBlfSksW10pLmpvaW4oXCIvXCIpfWUuZXhwb3J0cz1mdW5jdGlvbihlKXtlPWUudHJpbSgpO2lmKC9eZGF0YTovaS50ZXN0KGUpKXtyZXR1cm4gZX12YXIgcj1lLmluZGV4T2YoXCIvL1wiKSE9PS0xP2Uuc3BsaXQoXCIvL1wiKVswXStcIi8vXCI6XCJcIjt2YXIgdD1lLnJlcGxhY2UobmV3IFJlZ0V4cChyLFwiaVwiKSxcIlwiKS5zcGxpdChcIi9cIik7dmFyIG49dFswXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLFwiXCIpO3RbMF09XCJcIjt2YXIgaT1ub3JtYWxpemVVcmwodCk7cmV0dXJuIHIrbitpfX19O3ZhciByPXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18odCl7dmFyIG49clt0XTtpZihuIT09dW5kZWZpbmVkKXtyZXR1cm4gbi5leHBvcnRzfXZhciBpPXJbdF09e2V4cG9ydHM6e319O3ZhciBhPXRydWU7dHJ5e2VbdF0oaSxpLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7YT1mYWxzZX1maW5hbGx5e2lmKGEpZGVsZXRlIHJbdF19cmV0dXJuIGkuZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHQ9X19uY2N3cGNrX3JlcXVpcmVfXyg0MzIpO21vZHVsZS5leHBvcnRzPXR9KSgpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n        case REACT_ACTIVITY_TYPE:\n          return \"Activity\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_PORTAL_TYPE:\n            return \"Portal\";\n          case REACT_CONTEXT_TYPE:\n            return type.displayName || \"Context\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function UnknownOwner() {\n      return Error(\"react-stack-top-frame\");\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(\n      type,\n      key,\n      self,\n      source,\n      owner,\n      props,\n      debugStack,\n      debugTask\n    ) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        self,\n        source,\n        getOwner(),\n        maybeKey,\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\"),\n      REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray,\n      createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          };\n    React = {\n      react_stack_bottom_frame: function (callStackForError) {\n        return callStackForError();\n      }\n    };\n    var specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(\n      React,\n      UnknownOwner\n    )();\n    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      var trackActualOwner =\n        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        isStaticChildren,\n        source,\n        self,\n        trackActualOwner\n          ? Error(\"react-stack-top-frame\")\n          : unknownOwnerDebugStack,\n        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n      );\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIkM6XFxFYnR0aWthciBJbnRlbGxpZ2VuY2UgUHJvamVjdHNcXFRlc3QtQ2hhdC1BcHBcXG5vZGVfbW9kdWxlc1xcbmV4dFxcZGlzdFxcY29tcGlsZWRcXHJlYWN0XFxqc3gtZGV2LXJ1bnRpbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Montserrat\",\"arguments\":[{\"subsets\":[\"latin\"],\"display\":\"swap\",\"variable\":\"--font-montserrat\"}],\"variableName\":\"montserrat\"}":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/font/google/target.css?{"path":"app\\layout.tsx","import":"Montserrat","arguments":[{"subsets":["latin"],"display":"swap","variable":"--font-montserrat"}],"variableName":"montserrat"} ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'Montserrat', 'Montserrat Fallback'\",\"fontStyle\":\"normal\"},\"className\":\"__className_4bc053\",\"variable\":\"__variable_4bc053\"};\n    if(true) {\n      // 1752723137288\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1wicGF0aFwiOlwiYXBwXFxcXGxheW91dC50c3hcIixcImltcG9ydFwiOlwiTW9udHNlcnJhdFwiLFwiYXJndW1lbnRzXCI6W3tcInN1YnNldHNcIjpbXCJsYXRpblwiXSxcImRpc3BsYXlcIjpcInN3YXBcIixcInZhcmlhYmxlXCI6XCItLWZvbnQtbW9udHNlcnJhdFwifV0sXCJ2YXJpYWJsZU5hbWVcIjpcIm1vbnRzZXJyYXRcIn0iLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQkFBa0IsU0FBUyx3RUFBd0U7QUFDbkcsT0FBTyxJQUFVO0FBQ2pCO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMsd01BQXFJLGNBQWMsc0RBQXNEO0FBQ3ZPLE1BQU0sVUFBVTtBQUNoQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxFYnR0aWthciBJbnRlbGxpZ2VuY2UgUHJvamVjdHNcXFRlc3QtQ2hhdC1BcHBcXG5vZGVfbW9kdWxlc1xcbmV4dFxcZm9udFxcZ29vZ2xlXFx0YXJnZXQuY3NzP3tcInBhdGhcIjpcImFwcFxcbGF5b3V0LnRzeFwiLFwiaW1wb3J0XCI6XCJNb250c2VycmF0XCIsXCJhcmd1bWVudHNcIjpbe1wic3Vic2V0c1wiOltcImxhdGluXCJdLFwiZGlzcGxheVwiOlwic3dhcFwiLFwidmFyaWFibGVcIjpcIi0tZm9udC1tb250c2VycmF0XCJ9XSxcInZhcmlhYmxlTmFtZVwiOlwibW9udHNlcnJhdFwifXxhcHAtcGFnZXMtYnJvd3NlciJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wic3R5bGVcIjp7XCJmb250RmFtaWx5XCI6XCInTW9udHNlcnJhdCcsICdNb250c2VycmF0IEZhbGxiYWNrJ1wiLFwiZm9udFN0eWxlXCI6XCJub3JtYWxcIn0sXCJjbGFzc05hbWVcIjpcIl9fY2xhc3NOYW1lXzRiYzA1M1wiLFwidmFyaWFibGVcIjpcIl9fdmFyaWFibGVfNGJjMDUzXCJ9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE3NTI3MjMxMzcyODhcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiQzovRWJ0dGlrYXIgSW50ZWxsaWdlbmNlIFByb2plY3RzL1Rlc3QtQ2hhdC1BcHAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJwdWJsaWNQYXRoXCI6XCIvX25leHQvXCIsXCJlc01vZHVsZVwiOmZhbHNlLFwibG9jYWxzXCI6dHJ1ZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Montserrat\",\"arguments\":[{\"subsets\":[\"latin\"],\"display\":\"swap\",\"variable\":\"--font-montserrat\"}],\"variableName\":\"montserrat\"}\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Capp%5C%5Cproviders.tsx%22%2C%22ids%22%3A%5B%22Providers%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Montserrat%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%2C%5C%22display%5C%22%3A%5C%22swap%5C%22%2C%5C%22variable%5C%22%3A%5C%22--font-montserrat%5C%22%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22montserrat%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CEbttikar%20Intelligence%20Projects%5C%5CTest-Chat-App%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);