"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"d6e98c3ace10\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIkM6XFxFYnR0aWthciBJbnRlbGxpZ2VuY2UgUHJvamVjdHNcXFRlc3QtQ2hhdC1BcHBcXGFwcFxcZ2xvYmFscy5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJkNmU5OGMzYWNlMTBcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./context/ChatContext.tsx":
/*!*********************************!*\
  !*** ./context/ChatContext.tsx ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatProvider: () => (/* binding */ ChatProvider),\n/* harmony export */   useChat: () => (/* binding */ useChat)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_n8n_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/n8n-client */ \"(app-pages-browser)/./lib/n8n-client.ts\");\n/* harmony import */ var _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/mockapi-client */ \"(app-pages-browser)/./lib/mockapi-client.ts\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/constants */ \"(app-pages-browser)/./lib/constants.ts\");\n/* __next_internal_client_entry_do_not_use__ useChat,ChatProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst ChatContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction useChat() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ChatContext);\n    if (!context) {\n        throw new Error('useChat must be used within a ChatProvider');\n    }\n    return context;\n}\n_s(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction ChatProvider(param) {\n    let { children } = param;\n    _s1();\n    // Initialize clients\n    const n8nClient = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)((0,_lib_n8n_client__WEBPACK_IMPORTED_MODULE_2__.createN8NClient)({\n        webhookUrl: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.n8n.webhookUrl,\n        streamingUrl: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.n8n.streamingUrl,\n        timeout: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.n8n.timeout,\n        retryAttempts: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.n8n.retryAttempts,\n        retryDelay: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.n8n.retryDelay\n    }));\n    const mockApiClient = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)((0,_lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.createMockAPIClient)({\n        baseUrl: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.mockApi.baseUrl,\n        projectId: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.mockApi.projectId,\n        timeout: _lib_constants__WEBPACK_IMPORTED_MODULE_4__.API_CONFIG.mockApi.timeout\n    }));\n    // State\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        sessions: [],\n        currentSessionId: null,\n        isLoading: false,\n        error: null,\n        sidebarCollapsed: false,\n        theme: 'light'\n    });\n    // Current session messages\n    const [currentMessages, setCurrentMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [streamingMessageId, setStreamingMessageId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentMessageId, setCurrentMessageId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const sendingMessageRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Load initial data\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ChatProvider.useEffect\": ()=>{\n            loadSessions();\n            loadSidebarState();\n        }\n    }[\"ChatProvider.useEffect\"], []);\n    // Load messages when session changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ChatProvider.useEffect\": ()=>{\n            if (state.currentSessionId) {\n                loadMessages(state.currentSessionId);\n            } else {\n                setCurrentMessages([]);\n            }\n        }\n    }[\"ChatProvider.useEffect\"], [\n        state.currentSessionId\n    ]);\n    /**\n   * Load all sessions\n   */ const loadSessions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[loadSessions]\": async ()=>{\n            setState({\n                \"ChatProvider.useCallback[loadSessions]\": (prev)=>({\n                        ...prev,\n                        isLoading: true,\n                        error: null\n                    })\n            }[\"ChatProvider.useCallback[loadSessions]\"]);\n            try {\n                const sessions = await mockApiClient.current.getSessions();\n                const savedSessionId = localStorage.getItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sessionId);\n                setState({\n                    \"ChatProvider.useCallback[loadSessions]\": (prev)=>{\n                        var _sessions_;\n                        var _sessions__id;\n                        return {\n                            ...prev,\n                            sessions,\n                            isLoading: false,\n                            // Select saved session or first session if none selected\n                            currentSessionId: savedSessionId && sessions.find({\n                                \"ChatProvider.useCallback[loadSessions]\": (s)=>s.id === savedSessionId\n                            }[\"ChatProvider.useCallback[loadSessions]\"]) ? savedSessionId : (_sessions__id = (_sessions_ = sessions[0]) === null || _sessions_ === void 0 ? void 0 : _sessions_.id) !== null && _sessions__id !== void 0 ? _sessions__id : null\n                        };\n                    }\n                }[\"ChatProvider.useCallback[loadSessions]\"]);\n            } catch (error) {\n                const errorMessage = error instanceof _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.MockAPIError ? _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.mockAPIUtils.formatError(error) : 'Failed to load sessions';\n                setState({\n                    \"ChatProvider.useCallback[loadSessions]\": (prev)=>({\n                            ...prev,\n                            isLoading: false,\n                            error: errorMessage\n                        })\n                }[\"ChatProvider.useCallback[loadSessions]\"]);\n            }\n        }\n    }[\"ChatProvider.useCallback[loadSessions]\"], []);\n    /**\n   * Load messages for a session\n   */ const loadMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[loadMessages]\": async (sessionId)=>{\n            try {\n                const sessionMessages = await mockApiClient.current.getMessages(sessionId);\n                console.log('Loading messages for session:', sessionId, 'count:', sessionMessages.length);\n                console.log('Message IDs:', sessionMessages.map({\n                    \"ChatProvider.useCallback[loadMessages]\": (m)=>m.id\n                }[\"ChatProvider.useCallback[loadMessages]\"]));\n                setCurrentMessages(sessionMessages);\n            } catch (error) {\n                console.error('Failed to load messages:', error);\n            }\n        }\n    }[\"ChatProvider.useCallback[loadMessages]\"], []);\n    /**\n   * Create new session\n   */ const createSession = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[createSession]\": async (name)=>{\n            setState({\n                \"ChatProvider.useCallback[createSession]\": (prev)=>({\n                        ...prev,\n                        isLoading: true,\n                        error: null\n                    })\n            }[\"ChatProvider.useCallback[createSession]\"]);\n            try {\n                const sessionName = name || \"Chat \".concat(new Date().toLocaleString());\n                const session = await mockApiClient.current.createSession(sessionName);\n                setState({\n                    \"ChatProvider.useCallback[createSession]\": (prev)=>({\n                            ...prev,\n                            sessions: [\n                                session,\n                                ...prev.sessions\n                            ],\n                            currentSessionId: session.id,\n                            isLoading: false\n                        })\n                }[\"ChatProvider.useCallback[createSession]\"]);\n                // Save current session to localStorage\n                localStorage.setItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sessionId, session.id);\n            } catch (error) {\n                const errorMessage = error instanceof _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.MockAPIError ? _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.mockAPIUtils.formatError(error) : 'Failed to create session';\n                setState({\n                    \"ChatProvider.useCallback[createSession]\": (prev)=>({\n                            ...prev,\n                            isLoading: false,\n                            error: errorMessage\n                        })\n                }[\"ChatProvider.useCallback[createSession]\"]);\n            }\n        }\n    }[\"ChatProvider.useCallback[createSession]\"], []);\n    /**\n   * Select session\n   */ const selectSession = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[selectSession]\": async (sessionId)=>{\n            setState({\n                \"ChatProvider.useCallback[selectSession]\": (prev)=>({\n                        ...prev,\n                        currentSessionId: sessionId\n                    })\n            }[\"ChatProvider.useCallback[selectSession]\"]);\n            // Save to localStorage\n            localStorage.setItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sessionId, sessionId);\n            // Update session activity\n            try {\n                await mockApiClient.current.updateSessionActivity(sessionId);\n            } catch (error) {\n                console.error('Failed to update session activity:', error);\n            }\n        }\n    }[\"ChatProvider.useCallback[selectSession]\"], []);\n    /**\n   * Rename session\n   */ const renameSession = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[renameSession]\": async (sessionId, newName)=>{\n            const validationError = _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.mockAPIUtils.validateSessionName(newName);\n            if (validationError) {\n                setState({\n                    \"ChatProvider.useCallback[renameSession]\": (prev)=>({\n                            ...prev,\n                            error: validationError\n                        })\n                }[\"ChatProvider.useCallback[renameSession]\"]);\n                return;\n            }\n            try {\n                const updatedSession = await mockApiClient.current.updateSession(sessionId, {\n                    name: newName\n                });\n                setState({\n                    \"ChatProvider.useCallback[renameSession]\": (prev)=>({\n                            ...prev,\n                            sessions: prev.sessions.map({\n                                \"ChatProvider.useCallback[renameSession]\": (session)=>session.id === sessionId ? updatedSession : session\n                            }[\"ChatProvider.useCallback[renameSession]\"])\n                        })\n                }[\"ChatProvider.useCallback[renameSession]\"]);\n            } catch (error) {\n                const errorMessage = error instanceof _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.MockAPIError ? _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.mockAPIUtils.formatError(error) : 'Failed to rename session';\n                setState({\n                    \"ChatProvider.useCallback[renameSession]\": (prev)=>({\n                            ...prev,\n                            error: errorMessage\n                        })\n                }[\"ChatProvider.useCallback[renameSession]\"]);\n            }\n        }\n    }[\"ChatProvider.useCallback[renameSession]\"], []);\n    /**\n   * Delete session\n   */ const deleteSession = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[deleteSession]\": async (sessionId)=>{\n            try {\n                await mockApiClient.current.deleteSession(sessionId);\n                setState({\n                    \"ChatProvider.useCallback[deleteSession]\": (prev)=>{\n                        var _newSessions_;\n                        const newSessions = prev.sessions.filter({\n                            \"ChatProvider.useCallback[deleteSession].newSessions\": (s)=>s.id !== sessionId\n                        }[\"ChatProvider.useCallback[deleteSession].newSessions\"]);\n                        var _newSessions__id;\n                        const newCurrentSessionId = prev.currentSessionId === sessionId ? (_newSessions__id = (_newSessions_ = newSessions[0]) === null || _newSessions_ === void 0 ? void 0 : _newSessions_.id) !== null && _newSessions__id !== void 0 ? _newSessions__id : null : prev.currentSessionId;\n                        // Update localStorage\n                        if (newCurrentSessionId) {\n                            localStorage.setItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sessionId, newCurrentSessionId);\n                        } else {\n                            localStorage.removeItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sessionId);\n                        }\n                        return {\n                            ...prev,\n                            sessions: newSessions,\n                            currentSessionId: newCurrentSessionId\n                        };\n                    }\n                }[\"ChatProvider.useCallback[deleteSession]\"]);\n            } catch (error) {\n                const errorMessage = error instanceof _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.MockAPIError ? _lib_mockapi_client__WEBPACK_IMPORTED_MODULE_3__.mockAPIUtils.formatError(error) : 'Failed to delete session';\n                setState({\n                    \"ChatProvider.useCallback[deleteSession]\": (prev)=>({\n                            ...prev,\n                            error: errorMessage\n                        })\n                }[\"ChatProvider.useCallback[deleteSession]\"]);\n            }\n        }\n    }[\"ChatProvider.useCallback[deleteSession]\"], []);\n    /**\n   * Send message\n   */ const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[sendMessage]\": async (content)=>{\n            if (!state.currentSessionId) {\n                setState({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>({\n                            ...prev,\n                            error: 'No session selected'\n                        })\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                return;\n            }\n            // Prevent double submissions with ref\n            if (sendingMessageRef.current) {\n                console.log('Already sending message, ignoring duplicate request');\n                return;\n            }\n            sendingMessageRef.current = true;\n            setState({\n                \"ChatProvider.useCallback[sendMessage]\": (prev)=>({\n                        ...prev,\n                        error: null,\n                        isLoading: true\n                    })\n            }[\"ChatProvider.useCallback[sendMessage]\"]);\n            // Generate a temporary message ID for tracking\n            const tempMessageId = \"temp-\".concat(Date.now());\n            setCurrentMessageId(tempMessageId);\n            // Create user message\n            const userMessage = {\n                sessionId: state.currentSessionId,\n                content,\n                type: 'user',\n                timestamp: new Date()\n            };\n            try {\n                // Save user message\n                const savedUserMessage = await mockApiClient.current.createMessage(userMessage);\n                console.log('Adding user message:', savedUserMessage.id);\n                setCurrentMessages({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>{\n                        // Check if this message already exists to prevent duplicates\n                        const exists = prev.some({\n                            \"ChatProvider.useCallback[sendMessage].exists\": (msg)=>msg.id === savedUserMessage.id\n                        }[\"ChatProvider.useCallback[sendMessage].exists\"]);\n                        if (exists) {\n                            console.log('User message already exists, skipping:', savedUserMessage.id);\n                            return prev;\n                        }\n                        console.log('Adding new user message to state:', savedUserMessage.id);\n                        return [\n                            ...prev,\n                            savedUserMessage\n                        ];\n                    }\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                // Prepare n8n request with message ID for tracking\n                const n8nRequest = {\n                    username: 'user',\n                    message: content,\n                    sessionId: state.currentSessionId,\n                    timestamp: new Date(),\n                    messageId: tempMessageId // Add this to track thinking updates\n                };\n                // Send to n8n\n                const response = await n8nClient.current.sendMessageWithRetry(n8nRequest);\n                // Create assistant message\n                const assistantMessage = {\n                    sessionId: state.currentSessionId,\n                    content: '',\n                    type: 'assistant',\n                    timestamp: new Date(),\n                    responseData: {\n                        type: response.messageType,\n                        content: response.content,\n                        metadata: response.metadata\n                    }\n                };\n                // Save assistant message\n                const savedAssistantMessage = await mockApiClient.current.createMessage(assistantMessage);\n                console.log('Adding assistant message:', savedAssistantMessage.id);\n                setCurrentMessages({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>{\n                        // Check if this message already exists to prevent duplicates\n                        const exists = prev.some({\n                            \"ChatProvider.useCallback[sendMessage].exists\": (msg)=>msg.id === savedAssistantMessage.id\n                        }[\"ChatProvider.useCallback[sendMessage].exists\"]);\n                        if (exists) {\n                            console.log('Assistant message already exists, skipping:', savedAssistantMessage.id);\n                            return prev;\n                        }\n                        console.log('Adding new assistant message to state:', savedAssistantMessage.id);\n                        return [\n                            ...prev,\n                            savedAssistantMessage\n                        ];\n                    }\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                // Update session in state\n                setState({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>({\n                            ...prev,\n                            sessions: prev.sessions.map({\n                                \"ChatProvider.useCallback[sendMessage]\": (session)=>session.id === state.currentSessionId ? {\n                                        ...session,\n                                        metadata: {\n                                            ...session.metadata,\n                                            messageCount: session.metadata.messageCount + 2\n                                        }\n                                    } : session\n                            }[\"ChatProvider.useCallback[sendMessage]\"])\n                        })\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                // Clear loading state and message ID on success\n                setState({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>({\n                            ...prev,\n                            isLoading: false\n                        })\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                setCurrentMessageId(null);\n            } catch (error) {\n                const errorMessage = error instanceof _lib_n8n_client__WEBPACK_IMPORTED_MODULE_2__.N8NError ? _lib_n8n_client__WEBPACK_IMPORTED_MODULE_2__.n8nUtils.formatError(error) : 'Failed to send message';\n                setState({\n                    \"ChatProvider.useCallback[sendMessage]\": (prev)=>({\n                            ...prev,\n                            error: errorMessage,\n                            isLoading: false\n                        })\n                }[\"ChatProvider.useCallback[sendMessage]\"]);\n                setCurrentMessageId(null);\n            } finally{\n                sendingMessageRef.current = false;\n            }\n        }\n    }[\"ChatProvider.useCallback[sendMessage]\"], [\n        state.currentSessionId\n    ]);\n    /**\n   * Handle streaming messages\n   */ const handleStreaming = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[handleStreaming]\": async (sessionId)=>{\n            try {\n                for await (const response of n8nClient.current.streamMessages(sessionId)){\n                    if (_lib_n8n_client__WEBPACK_IMPORTED_MODULE_2__.n8nUtils.isInterimMessage(response)) {\n                        // Create interim message\n                        const interimMessage = {\n                            sessionId,\n                            content: typeof response.content === 'string' ? response.content : JSON.stringify(response.content),\n                            type: 'interim',\n                            timestamp: new Date(),\n                            responseData: {\n                                type: response.messageType,\n                                content: response.content,\n                                metadata: response.metadata\n                            }\n                        };\n                        // Save and display interim message\n                        const savedInterimMessage = await mockApiClient.current.createMessage(interimMessage);\n                        setCurrentMessages({\n                            \"ChatProvider.useCallback[handleStreaming]\": (prev)=>[\n                                    ...prev,\n                                    savedInterimMessage\n                                ]\n                        }[\"ChatProvider.useCallback[handleStreaming]\"]);\n                    }\n                }\n            } catch (error) {\n                console.error('Streaming error:', error);\n            }\n        }\n    }[\"ChatProvider.useCallback[handleStreaming]\"], []);\n    /**\n   * Retry failed message\n   */ const retryMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[retryMessage]\": async (messageId)=>{\n            const message = currentMessages.find({\n                \"ChatProvider.useCallback[retryMessage].message\": (m)=>m.id === messageId\n            }[\"ChatProvider.useCallback[retryMessage].message\"]);\n            if (!message || message.type !== 'user') return;\n            await sendMessage(message.content);\n        }\n    }[\"ChatProvider.useCallback[retryMessage]\"], [\n        currentMessages,\n        sendMessage\n    ]);\n    /**\n   * Toggle sidebar\n   */ const toggleSidebar = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[toggleSidebar]\": ()=>{\n            setState({\n                \"ChatProvider.useCallback[toggleSidebar]\": (prev)=>{\n                    const newCollapsed = !prev.sidebarCollapsed;\n                    localStorage.setItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sidebarCollapsed, String(newCollapsed));\n                    return {\n                        ...prev,\n                        sidebarCollapsed: newCollapsed\n                    };\n                }\n            }[\"ChatProvider.useCallback[toggleSidebar]\"]);\n        }\n    }[\"ChatProvider.useCallback[toggleSidebar]\"], []);\n    /**\n   * Load sidebar state from localStorage\n   */ const loadSidebarState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[loadSidebarState]\": ()=>{\n            const saved = localStorage.getItem(_lib_constants__WEBPACK_IMPORTED_MODULE_4__.STORAGE_KEYS.sidebarCollapsed);\n            if (saved) {\n                setState({\n                    \"ChatProvider.useCallback[loadSidebarState]\": (prev)=>({\n                            ...prev,\n                            sidebarCollapsed: saved === 'true'\n                        })\n                }[\"ChatProvider.useCallback[loadSidebarState]\"]);\n            }\n        }\n    }[\"ChatProvider.useCallback[loadSidebarState]\"], []);\n    /**\n   * Clear error\n   */ const clearError = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"ChatProvider.useCallback[clearError]\": ()=>{\n            setState({\n                \"ChatProvider.useCallback[clearError]\": (prev)=>({\n                        ...prev,\n                        error: null\n                    })\n            }[\"ChatProvider.useCallback[clearError]\"]);\n        }\n    }[\"ChatProvider.useCallback[clearError]\"], []);\n    const value = {\n        state,\n        currentMessages,\n        currentMessageId,\n        createSession,\n        selectSession,\n        renameSession,\n        deleteSession,\n        sendMessage,\n        retryMessage,\n        toggleSidebar,\n        clearError\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ChatContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Ebttikar Intelligence Projects\\\\Test-Chat-App\\\\context\\\\ChatContext.tsx\",\n        lineNumber: 445,\n        columnNumber: 5\n    }, this);\n}\n_s1(ChatProvider, \"yqIVGbJRCf/4KC7JQutgEjkWA2Q=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./context/ChatContext.tsx\n"));

/***/ })

});